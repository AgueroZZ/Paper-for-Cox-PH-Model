source('~/Desktop/Stats Research/current work/code/00-load-packages.R')
source('~/Documents/GitHub/Paper-for-Cox-PH-Model/codes/01-functions.R')
set.seed(123)
PLOT_TEXT_SIZE = 8
options(mc.cores = 4L)
cores <- 4
RW2BINS <- 50
PARALLEL_EXECUTION <- T
N <- nrow(Leuk)
data <- sample_n(Leuk, N, replace = FALSE, weight = NULL, .env = NULL)
data <- data_frame(tpi=data$tpi,times = data$time, entry = rep(0,nrow(data)),censoring = data$cens, wbc = data$wbc, age = data$age, sex = data$sex)
data <- data %>% as_tibble() %>%
mutate(tpi_binned = bin_covariate(tpi,bins = RW2BINS,type = "quantile"))
data <- arrange_data(data)
data$ID <- 1:nrow(data)
Alist <- list()
Alist$tpi <- create_alist_element(data$tpi_binned)
model_data <- list(
A = Alist,
M = Alist %>% map("A") %>% map(ncol) %>% reduce(sum) - 1,
n = length(unique(data$ID)),
X = as.matrix(data_frame(sex = data$sex, age = data$age, wbc = data$wbc))
)
model_data$theta_logprior <- function(theta,prior_alpha = .5,prior_u = 2) {
lambda <- -log(prior_alpha)/prior_u
log(lambda/2) - lambda * exp(-theta/2) - theta/2
}
model_data$beta_logprec <- log(.05)
model_data$p <- 3
model_data$diffmat <- create_diff_matrix(model_data$n)
model_data$lambdainv <- create_full_dtcp_matrix(model_data$n)
model_data$Nd <- model_data$n - 1
model_data$Ne <- model_data$n
model_data$Wd <- model_data$M  + model_data$Nd + model_data$p
model_data$Wdf <- model_data$M  + model_data$Ne + model_data$p
model_data$times <- data$times
model_data$censoring <- data$censoring
model_data$entry <- data$entry
model_data$ID <- data$ID
model_data$diffmat <- create_diff_matrix(model_data$n)
model_data$lambdainv <- create_full_dtcp_matrix(model_data$n)
model_data$A$tpi$Ad <- model_data$diffmat %*% model_data$A$tpi$A
model_data$Xd <- model_data$diffmat %*% model_data$X
model_data$thetagrid <- mvQuad::createNIGrid(dim = 1,type = "GLe",level = 40)
mvQuad::rescale(model_data$thetagrid,domain = c(0,16))
thetalist <- split(mvQuad::getNodes(model_data$thetagrid),rep(1:nrow(mvQuad::getNodes(model_data$thetagrid))))
# Random effect model specification data
model_data$modelspec <- model_data$A %>%
purrr::map("model") %>%
purrr::map2(.,names(.),~tibble(covariate = .y,model = .x)) %>%
purrr::reduce(bind_rows)
model_data$vectorofcolumnstoremove <- round(RW2BINS/2)
cat("Finished creating model data!\n")
#Optimization:
control1 <- list(
prec = 1e-08,
stop.trust.radius = 1e-10,
report.freq = 10,
report.level = 4,
start.trust.radius = 100,
contract.threshold = .25,
contract.factor = .5,
expand.factor = 3,
trust.iter = 2000,
maxit = 3000,
preconditioner = 0
)
tm <- proc.time()
sim1opt <- optimize_all_thetas_parallel(
theta = model_data$thetagrid,
model_data = model_data,
optcontrol = control1,
doparallel = PARALLEL_EXECUTION
)
rt <- proc.time() - tm
#Hyperparameter:Posterior
optresults_withlogpostpre <- add_log_posterior_values(sim1opt,model_data = model_data)
optresults_withlogpost <- normalize_optresults_logpost(optresults_withlogpostpre)
margpost1 <- marginal_hyperparameter_posterior(1,optresults_withlogpost)
priorfunc <- function(x) exp(model_data$theta_logprior(x))
priorfuncsigma <- function(x) (2/x) * exp(model_data$theta_logprior(-2*log(x)))
thetapostplot1 <- margpost1$margpost %>%
mutate(theta_post = exp(thetalogmargpost)) %>%
ggplot(aes(x = theta)) +
theme_classic() +
geom_line(aes(y = theta_post),colour = "black",size = 0.5) +
geom_line(aes(y = priorfunc(theta)),colour = "black",linetype = "dashed",size = 0.5) +
# coord_cartesian(xlim = c(0,20)) +
labs(y = "Density",x = "") +
theme(text = element_text(size = PLOT_TEXT_SIZE))
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",size = 0.5) +
geom_line(aes(y = priorfuncsigma(sigma)),colour = "black",linetype = "dashed",size = 0.5) +
labs(x = "",y = "Density") +
theme(text = element_text(size = PLOT_TEXT_SIZE))
sigmapostplot1
#INLA:
cnsA1 <- matrix(rep(0,RW2BINS),nrow = 1)
cnsA1[model_data$vectorofcolumnstoremove] <- 1
conse <- matrix(0, nrow = 1, ncol = 1)
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(3, 0.5)))
formula <- inla.surv(times,censoring) ~ sex + age + wbc + f(tpi_binned,model = 'rw2',constr = F, extraconstr = list(A=cnsA1,e=conse), hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.compute = list(dic=TRUE),control.inla = list(strategy = 'gaussian',int.strategy = 'grid', correct = FALSE), control.fixed = list(prec = 0.05), data = data, family = "coxph")
fhat <- Inlaresult$summary.random$tpi_binned$mean
fhat[model_data$vectorofcolumnstoremove] = 0
meanhere <- fhat
plotINLA <- data.frame(tpi = Inlaresult$summary.random$tpi_binned$ID)
plot(fhat,type = 'l')
datainla <- data_frame(x = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,1], y = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,2])
sigma <- 1/sqrt(datainla$x)
sigma_dens <- 2*(sigma^(-3))*datainla$y
datainla_sigma <- data_frame(sigma = sigma[-c(1:8)], sigma_dens = sigma_dens[-c(1:8)])
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 0.5) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'dashed',size = 0.5) +
geom_line(data = datainla_sigma, aes(y = sigma_dens, x = sigma),colour = 'black',linetype = 'dotdash',size = 0.5)
sigmapostplot1
margpost1$margpost
margpost1$margpost$sigma
datainla
datainla_sigma
datainla <- data_frame(x = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,1], y = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,2])
sigma <- 1/sqrt(datainla$x)
sigma_dens <- 2*(sigma^(-3))*datainla$y
datainla_sigma <- data_frame(sigma = sigma[-c(1:12)], sigma_dens = sigma_dens[-c(1:12)])
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 0.5) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'dashed',size = 0.5) +
geom_line(data = datainla_sigma, aes(y = sigma_dens, x = sigma),colour = 'black',linetype = 'dotdash',size = 0.5)
sigmapostplot1
datainla <- data_frame(x = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,1], y = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,2])
sigma <- 1/sqrt(datainla$x)
sigma_dens <- 2*(sigma^(-3))*datainla$y
datainla_sigma <- data_frame(sigma = sigma[-c(1:14)], sigma_dens = sigma_dens[-c(1:14)])
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 0.5) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'dashed',size = 0.5) +
geom_line(data = datainla_sigma, aes(y = sigma_dens, x = sigma),colour = 'black',linetype = 'dotdash',size = 0.5)
sigmapostplot1
datainla <- data_frame(x = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,1], y = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,2])
sigma <- 1/sqrt(datainla$x)
sigma_dens <- 2*(sigma^(-3))*datainla$y
datainla_sigma <- data_frame(sigma = sigma[-c(1:12)], sigma_dens = sigma_dens[-c(1:12)])
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 0.5) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'dashed',size = 0.5) +
geom_line(data = datainla_sigma, aes(y = sigma_dens, x = sigma),colour = 'black',linetype = 'dotdash',size = 0.5)
sigmapostplot1
datainla <- data_frame(x = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,1], y = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,2])
sigma <- 1/sqrt(datainla$x)
sigma_dens <- 2*(sigma^(-3))*datainla$y
datainla_sigma <- data_frame(sigma = sigma[-c(1:14)], sigma_dens = sigma_dens[-c(1:14)])
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 0.5) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'dashed',size = 0.5) +
geom_line(data = datainla_sigma, aes(y = sigma_dens, x = sigma),colour = 'black',linetype = 'dotdash',size = 0.5)
datainla_sigma
datainla <- data_frame(x = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,1], y = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,2])
sigma <- 1/sqrt(datainla$x)
sigma_dens <- 2*(sigma^(-3))*datainla$y
datainla_sigma <- data_frame(sigma = sigma[-c(1:13)], sigma_dens = sigma_dens[-c(1:13)])
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 0.5) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'dashed',size = 0.5) +
geom_line(data = datainla_sigma, aes(y = sigma_dens, x = sigma),colour = 'black',linetype = 'dotdash',size = 0.5)
datainla_sigma
margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost))
datainla <- data_frame(x = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,1], y = Inlaresult$marginals.hyperpar$`Precision for tpi_binned`[,2])
sigma <- 1/sqrt(datainla$x)
sigma_dens <- 2*(sigma^(-3))*datainla$y
datainla_sigma <- data_frame(sigma = sigma[-c(1:13)], sigma_dens = sigma_dens[-c(1:13)])
sigmapostplot1 <- margpost1$margpost[-c(1:6),] %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 0.5) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'dashed',size = 0.5) +
geom_line(data = datainla_sigma, aes(y = sigma_dens, x = sigma),colour = 'black',linetype = 'dotdash',size = 0.5)
sigmapostplot1
load("/Users/ziangzhang/Desktop/simulation_for_smoothing_Data/sim_data.Rdata")
library(abcoxph)
prior <- prior_setup(theta_number = 50, theta_grid = c(-3,3), theta_prior_u = 2.5)
model <- abcoxph_setup(times~s(exposure), cens = "censoring", data = data, prior_control = prior, RW2BINS = 50)
model_fit <- abcox_fit(model ,PARALLEL_EXECUTION = T)
library(abcoxph)
prior_setup
prior <- prior_setup(theta_number = 50, theta_grid = c(-3,3), theta_prior_u = 2.5)
model <- abcoxph_setup(times~s(exposure), cens = "censoring", data = data, prior_control = prior, RW2BINS = 50)
options(mc.cores = 2L)
data <- survival::kidney
data <- data.frame(time = data$time, status = data$status, age = data$age,sex = data$sex,GN = ifelse(data$disease == "GN",1,0),AN = ifelse(data$disease == "AN",1,0),PKD = ifelse(data$disease == "PKD",1,0), id = data$id)
model <- abcoxph_setup(time~age + sex + GN + AN + PKD + id(id), cens = "status",data = data)
model_fit <- abcox_fit(model,PARALLEL_EXECUTION = T)
prior
load("sim_data.Rdata")
load("/Users/ziangzhang/Desktop/simulation_for_smoothing_Data/sim_data.Rdata")
library(abcoxph)
prior <- prior_setup(theta_number = 50, theta_grid = c(-3,3), theta_prior_u = 2.5)
model <- abcoxph_setup(times~s(exposure), cens = "censoring", data = data, prior_control = prior, RW2BINS = 50)
abcoxph_setup
model <- abcoxph_setup(times~ -1 + s(exposure), cens = "censoring", data = data, prior_control = prior, RW2BINS = 50)
parse_formula
# INTERNAL: parse formula
parse_formula <- function(ff) {
# Parse the formula ff into linear and smooth terms and a id
# Linear terms will be passed to model.matrix()
# Smooth terms will be handled in a proprietary manner
fullff <- ff # Save the input formula for later printing.
# Grab the RHS elements of the formula
ff_elements <- attributes(terms(ff))$term.labels
# Get the names of the variables. This strips off the s() wrappers
# and includes the respose.
ff_variables <- all.vars(ff)
# Split the names into response, linear, and smooth terms.
# Throw an error if any terms are not supported.
response <- ff_variables[1] # Response is always the first
# Match smooth terms using regex
# Will only match terms that look like s(variable). Extra stuff in the s()
# will cause an error. Keep formulas clean!
smooth <- stringr::str_extract(ff_elements,"^s\\(\\w+\\)$")
smooth <- smooth[!is.na(smooth)]
# Remove it from ff
if (length(smooth) > 0) {
for (tm in smooth) ff <- update(ff,formula(stringr::str_c(".~.-",tm)))
}
# Strip off the s() part
smooth <- stringr::str_remove(smooth,"^s\\(") %>% stringr::str_remove("\\)$")
# Match id terms in same way as smooth
id <- stringr::str_extract(ff_elements,"^id\\(\\w+\\)$")
id <- id[!is.na(id)]
# Remove it from ff
if (length(id) > 0) {
for (tm in id) ff <- update(ff,formula(stringr::str_c(".~.-",tm)))
}
# Strip off the s() part
id <- stringr::str_remove(id,"^id\\(") %>% stringr::str_remove("\\)$")
# All the terms that are left are treated as linear and passed to model.matrix
# within the model_setup function. Any errors will come from that call.
# Finally, remove the intercept. If a -1 was already in the formula, this operation does nothing,
# so it's safe.
ff <- update(ff,.~.-1)
# Return a named list of vectors with the names of each type of term
list(
# linear = attributes(terms(ff))$term.labels,
linear = setdiff(all.vars(ff),response),
linear_formula = ff,
smooth = smooth,
id = id,
response = response,
call = fullff
)
}
# INTERNAL: get the degree of a polynomial from a formula
get_polynomial_degree <- function(ff) {
ffvars <- all.vars(ff)[-1]
ffattr <- attributes(terms(ff))$term.labels
varnameregex <- "A-Za-z0-9_."
degree_1 <- stringr::str_extract(ffattr,stringr::str_c("^[",varnameregex,"]+$"))
degree_1 <- degree_1[!is.na(degree_1)]
degree_more_than_1 <- stringr::str_extract(ffattr,stringr::str_c("^poly\\([",varnameregex,"=\\s\\,\\)]*"))
degree_more_than_1 <- degree_more_than_1[!is.na(degree_more_than_1)]
# Get the names
deg_mt1_names <- stringr::str_extract(degree_more_than_1,stringr::str_c("^poly\\([",varnameregex,"]+")) %>%
stringr::str_remove("^poly\\(")
deg_mt1_degrees <- stringr::str_extract(degree_more_than_1,stringr::str_c("^poly\\([",varnameregex,"]+\\,\\s?[A-Za-z\\s=]*[0-9]")) %>%
stringr::str_remove(stringr::str_c("^poly\\([",varnameregex,"]+\\,\\s?[A-Za-z\\s=]*")) %>%
as.numeric()
out <- c(rep(1,length(degree_1)),deg_mt1_degrees)
names(out) <- c(degree_1,deg_mt1_names)
out
}
# INTERNAL: prescribe default control arguments
abcox_default_control <- function() {
list(
smooth_prior = list(),
linear_constraints = list(),
doparallel = TRUE,
thetaaccuracy = 3,
sparsetheta = FALSE,
thetarange = c(-1,1),
beta_prior_logprec = log(1/10),
opt_control = list(
prec = 1e-08,
stop.trust.radius = 1e-10,
report.freq = 10,
report.level = 4,
start.trust.radius = 100,
contract.threshold = .25,
contract.factor = .5,
expand.factor = 3,
trust.iter = 2000,
maxit = 3000,
preconditioner = 0
)
)
}
parse_formula(times~ s(exposure))
library(dplyr)
parse_formula(times~ s(exposure))
str <- parse_formula
str <- parse_formula(times~ s(exposure))
str
str$linear
str <- parse_formula(time~age + sex + GN + AN + PKD + id(id))
str
str$linear
str$linear[2]
newdata <- data_frame()
newdata
st
str
str$response
data
newdata
newdata$a
newdata$"a" <- c(1,2,3,4)
a
newdata$a <- cars$speed
?data_frame()
newdata <- data_frame(times = cars$speed)
newdata
load("/Users/ziangzhang/Desktop/sim_data.Rdata")
