data$ID <- 1:nrow(data)
Alist <- list()
Alist$tpi <- create_alist_element(data$tpi_binned)
model_data <- list(
A = Alist,
M = Alist %>% map("A") %>% map(ncol) %>% reduce(sum) - 1,
n = length(unique(data$ID)),
X = as.matrix(data_frame(sex = data$sex, age = data$age, wbc = data$wbc))
)
model_data$theta_logprior <- function(theta,prior_alpha = .5,prior_u = 2.5) {
lambda <- -log(prior_alpha)/prior_u
log(lambda/2) - lambda * exp(-theta/2) - theta/2
}
model_data$beta_logprec <- log(.05)
model_data$p <- 3
model_data$diffmat <- create_diff_matrix(model_data$n)
model_data$lambdainv <- create_full_dtcp_matrix(model_data$n)
model_data$Nd <- model_data$n - 1
model_data$Ne <- model_data$n
model_data$Wd <- model_data$M  + model_data$Nd + model_data$p
model_data$Wdf <- model_data$M  + model_data$Ne + model_data$p
model_data$times <- data$times
model_data$censoring <- data$censoring
model_data$entry <- data$entry
model_data$ID <- data$ID
model_data$diffmat <- create_diff_matrix(model_data$n)
model_data$lambdainv <- create_full_dtcp_matrix(model_data$n)
model_data$A$tpi$Ad <- model_data$diffmat %*% model_data$A$tpi$A
model_data$Xd <- model_data$diffmat %*% model_data$X
model_data$thetagrid <- mvQuad::createNIGrid(dim = 1,type = "GLe",level = 30)
mvQuad::rescale(model_data$thetagrid,domain = c(-1,16))
thetalist <- split(mvQuad::getNodes(model_data$thetagrid),rep(1:nrow(mvQuad::getNodes(model_data$thetagrid))))
# Random effect model specification data
model_data$modelspec <- model_data$A %>%
purrr::map("model") %>%
purrr::map2(.,names(.),~tibble(covariate = .y,model = .x)) %>%
purrr::reduce(bind_rows)
model_data$vectorofcolumnstoremove <- round(RW2BINS/2)
cat("Finished creating model data!\n")
#Optimization:
control1 <- list(
prec = 1e-08,
stop.trust.radius = 1e-10,
report.freq = 10,
report.level = 4,
start.trust.radius = 100,
contract.threshold = .25,
contract.factor = .5,
expand.factor = 3,
trust.iter = 2000,
maxit = 3000,
preconditioner = 0
)
tm <- proc.time()
sim1opt <- optimize_all_thetas_parallel(
theta = model_data$thetagrid,
model_data = model_data,
optcontrol = control1,
doparallel = PARALLEL_EXECUTION
)
rt <- proc.time() - tm
cores
set.seed(123)
options(mc.cores = 10L)
cores <- 10
RW2BINS <- 50
POLYNOMIAL_DEGREE <- 1
PARALLEL_EXECUTION <- TRUE
N <- nrow(Leuk)
data <- sample_n(Leuk, N, replace = FALSE, weight = NULL, .env = NULL)
data <- data_frame(tpi=data$tpi,times = data$time, entry = rep(0,nrow(data)),censoring = data$cens, wbc = data$wbc, age = data$age, sex = data$sex)
data <- data %>% as_tibble() %>%
mutate(tpi_binned = bin_covariate(tpi,bins = RW2BINS,type = "quantile"))
data <- arrange_data(data)
data$ID <- 1:nrow(data)
Alist <- list()
Alist$tpi <- create_alist_element(data$tpi_binned)
model_data <- list(
A = Alist,
M = Alist %>% map("A") %>% map(ncol) %>% reduce(sum) - 1,
n = length(unique(data$ID)),
X = as.matrix(data_frame(sex = data$sex, age = data$age, wbc = data$wbc))
)
model_data$vectorofcolumnstoremove
model_data$vectorofcolumnstoremove <- round(RW2BINS/2)
model_data$vectorofcolumnstoremove
cnsA1 <- matrix(rep(0,RW2BINS),nrow = 1)
cnsA1[model_data$vectorofcolumnstoremove] <- 1
conse <- matrix(0, nrow = 1, ncol = 1)
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(2.5, 0.5)))
formula <- inla.surv(times,censoring) ~ sex + age + wbc + f(tpi_binned,model = 'rw2',constr = F, extraconstr = list(A=cnsA1,e=conse), hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.compute = list(dic=TRUE),control.inla = list(strategy = 'gaussian',int.strategy = 'grid', correct = FALSE), control.fixed = list(prec = 0.05), data = data, family = "coxph")
fhat <- Inlaresult$summary.random$tpi_binned$mean
fhat[model_data$vectorofcolumnstoremove] = 0
meanhere <- fhat
plotINLA <- data.frame(tpi = Inlaresult$summary.random$tpi_binned$ID)
fhat
plot(fhat)
plot(fhat,type = 'l')
cnsA1 <- matrix(rep(0,RW2BINS),nrow = 1)
cnsA1[model_data$vectorofcolumnstoremove] <- 1
conse <- matrix(0, nrow = 1, ncol = 1)
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(1, 0.5)))
formula <- inla.surv(times,censoring) ~ sex + age + wbc + f(tpi_binned,model = 'rw2',constr = F, extraconstr = list(A=cnsA1,e=conse), hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.compute = list(dic=TRUE),control.inla = list(strategy = 'gaussian',int.strategy = 'grid', correct = FALSE), control.fixed = list(prec = 0.05), data = data, family = "coxph")
fhat <- Inlaresult$summary.random$tpi_binned$mean
fhat[model_data$vectorofcolumnstoremove] = 0
meanhere <- fhat
plotINLA <- data.frame(tpi = Inlaresult$summary.random$tpi_binned$ID)
plot(fhat,type = 'l')
cnsA1 <- matrix(rep(0,RW2BINS),nrow = 1)
cnsA1[model_data$vectorofcolumnstoremove] <- 1
conse <- matrix(0, nrow = 1, ncol = 1)
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(1, 0.5)))
formula <- inla.surv(times,censoring) ~ sex + age + wbc + f(tpi_binned,model = 'rw2',constr = F, extraconstr = list(A=cnsA1,e=conse))
Inlaresult <- inla(formula = formula, control.compute = list(dic=TRUE),control.inla = list(strategy = 'gaussian',int.strategy = 'grid', correct = FALSE), control.fixed = list(prec = 0.05), data = data, family = "coxph")
fhat <- Inlaresult$summary.random$tpi_binned$mean
fhat[model_data$vectorofcolumnstoremove] = 0
meanhere <- fhat
plotINLA <- data.frame(tpi = Inlaresult$summary.random$tpi_binned$ID)
plot(fhat,type = 'l')
cnsA1 <- matrix(rep(0,RW2BINS),nrow = 1)
cnsA1[model_data$vectorofcolumnstoremove] <- 1
conse <- matrix(0, nrow = 1, ncol = 1)
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(5, 0.5)))
formula <- inla.surv(times,censoring) ~ sex + age + wbc + f(tpi_binned,model = 'rw2',constr = F, extraconstr = list(A=cnsA1,e=conse), hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.compute = list(dic=TRUE),control.inla = list(strategy = 'gaussian',int.strategy = 'grid', correct = FALSE), control.fixed = list(prec = 0.05), data = data, family = "coxph")
fhat <- Inlaresult$summary.random$tpi_binned$mean
fhat[model_data$vectorofcolumnstoremove] = 0
meanhere <- fhat
plotINLA <- data.frame(tpi = Inlaresult$summary.random$tpi_binned$ID)
plot(fhat,type = 'l')
#INLA:
cnsA1 <- matrix(rep(0,RW2BINS),nrow = 1)
cnsA1[model_data$vectorofcolumnstoremove] <- 1
conse <- matrix(0, nrow = 1, ncol = 1)
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(100, 0.5)))
formula <- inla.surv(times,censoring) ~ sex + age + wbc + f(tpi_binned,model = 'rw2',constr = F, extraconstr = list(A=cnsA1,e=conse), hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.compute = list(dic=TRUE),control.inla = list(strategy = 'gaussian',int.strategy = 'grid', correct = FALSE), control.fixed = list(prec = 0.05), data = data, family = "coxph")
fhat <- Inlaresult$summary.random$tpi_binned$mean
fhat[model_data$vectorofcolumnstoremove] = 0
meanhere <- fhat
plotINLA <- data.frame(tpi = Inlaresult$summary.random$tpi_binned$ID)
plot(fhat,type = 'l')
#INLA:
cnsA1 <- matrix(rep(0,RW2BINS),nrow = 1)
cnsA1[model_data$vectorofcolumnstoremove] <- 1
conse <- matrix(0, nrow = 1, ncol = 1)
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(100, 0.5)))
formula <- inla.surv(times,censoring) ~ sex + age + wbc + f(tpi_binned,model = 'rw2',constr = F, extraconstr = list(A=cnsA1,e=conse), hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.compute = list(dic=TRUE),control.inla = list(strategy = 'gaussian',int.strategy = 'grid', correct = FALSE), control.fixed = list(prec = 0.05), data = data, family = "coxph")
fhat <- Inlaresult$summary.random$tpi_binned$mean
fhat[model_data$vectorofcolumnstoremove] = 0
meanhere <- fhat
plotINLA <- data.frame(tpi = Inlaresult$summary.random$tpi_binned$ID)
plot(fhat,type = 'l')
source('~/Desktop/Stats Research/current work/code/00-load-packages.R')
source('~/Documents/GitHub/STA497/last_simulation/SingleTheta_new.R')
set.seed(123)
cores <- 4
RW2BINS <- 50
PARALLEL_EXECUTION <- TRUE
data <- kidney
data <- data_frame(times = data$time, entry = rep(0,nrow(data)),censoring = data$status, age = data$age, sex = data$sex, disease = data$disease, id = data$id)
data$disease <- relevel(data$disease,ref = "Other")
data <- arrange_data(data)
data$ID <- 1:nrow(data)
xdata <- data.frame(age = data$age,sex = data$sex,GN = ifelse(data$disease == "GN",1,0),AN = ifelse(data$disease == "AN",1,0),PKD = ifelse(data$disease == "PKD",1,0))
Blist <- list()
Blist$id <- create_blist_element(data$id)
iidnum <- Blist %>% map("B") %>% map(ncol) %>% reduce(sum)
model_data <- list(
X=as.matrix(xdata),
B = Blist,
M = iidnum,
n = length(unique(data$ID)),
Nd = length(unique(data$ID))-1
)
model_data$beta_logprec <- log(.05)
model_data$diffmat <- create_diff_matrix(model_data$n)
model_data$lambdainv <- create_full_dtcp_matrix(model_data$n)
model_data$Xd <- model_data$diffmat %*% model_data$X
model_data$B$id$Bd <- model_data$diffmat %*% model_data$B$id$B
model_data$p <- ncol(model_data$X)
model_data$Ne <- model_data$n
model_data$Wd <- model_data$M + model_data$p + model_data$Nd
model_data$Wdf <- model_data$M + model_data$p + model_data$Ne
model_data$times <- data$times
model_data$censoring <- data$censoring
model_data$entry <- data$entry
model_data$ID <- data$ID
model_data$theta_logprior <- function(theta,prior_alpha = c(.5),prior_u = c(2)) {
# In this model, theta is the LOG PRECISION of the rw2 smoothing variance
# Implement the PC prior directly.
# P(sigma > u) = alpha.
# See inla.doc("pc.prec")
lambda <- -log(prior_alpha)/prior_u
log(lambda/2) - lambda * exp(-theta/2) - theta/2
}
model_data$thetagrid <- mvQuad::createNIGrid(dim = 1,type = "GLe",level = 50)
mvQuad::rescale(model_data$thetagrid,domain = c(-1,8))
thetalist <- split(mvQuad::getNodes(model_data$thetagrid),rep(1:nrow(mvQuad::getNodes(model_data$thetagrid))))
# Random effect model specification data
model_data$modelspec <- model_data$B %>%
purrr::map("model") %>%
purrr::map2(.,names(.),~tibble(covariate = .y,model = .x)) %>%
purrr::reduce(bind_rows)
cat("Finished creating model data!\n")
#Optimization:
control1 <- list(
prec = 1e-08,
stop.trust.radius = 1e-10,
report.freq = 10,
report.level = 4,
start.trust.radius = 100,
contract.threshold = .25,
contract.factor = .5,
expand.factor = 3,
trust.iter = 2000,
maxit = 3000,
preconditioner = 0
)
tm <- proc.time()
sim1opt <- optimize_all_thetas_parallel(
theta = model_data$thetagrid,
model_data = model_data,
optcontrol = control1,
doparallel = PARALLEL_EXECUTION
)
rt <- proc.time() - tm
# Plots of marginal posteriors for hyperparameter
optresults_withlogpostpre <- add_log_posterior_values(sim1opt,model_data = model_data)
optresults_withlogpost <- normalize_optresults_logpost(optresults_withlogpostpre)
margpost1 <- marginal_hyperparameter_posterior(1,optresults_withlogpost)
priorfunc <- function(x) exp(model_data$theta_logprior(x))
priorfuncsigma <- function(x) (2/x) * exp(model_data$theta_logprior(-2*log(x)))
thetapostplot1 <- margpost1$margpost %>%
mutate(theta_post = exp(thetalogmargpost)) %>%
ggplot(aes(x = theta)) +
theme_classic() +
geom_line(aes(y = theta_post),colour = "red",size = 1) +
geom_line(aes(y = priorfunc(theta)),colour = "black",size = 0.5) +
labs(x = "",y = "") +
theme(text = element_text(size = 8))
thetapostplot1
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "red",size = 1) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = "black",size = 0.5) +
theme(text = element_text(size = 8))
sigmapostplot1
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 1) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'dotdash',size = 0.5) +
theme(text = element_text(size = 8))
sigmapostplot1
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 1) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'dash',size = 0.5) +
theme(text = element_text(size = 8))
sigmapostplot1
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 1) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'dash',size = 0.5) +
theme(text = element_text(size = 8))
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 1) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'solid',size = 0.5) +
theme(text = element_text(size = 8))
sigmapostplot1
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 1) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'dash',size = 0.5) +
theme(text = element_text(size = 8))
sigmapostplot1
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 1) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'dashed',size = 0.5) +
theme(text = element_text(size = 8))
sigmapostplot1
ggsave(filename = "~/Kidney_PosterSigma.pdf", plot = sigmapostplot1)
source("~/Paper-for-Cox-PH-Model/codes/00-load-packages.R")
source("~/Paper-for-Cox-PH-Model/codes/01-functions.R")
set.seed(123)
setwd(" /Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model")
setwd("~/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model")
source('~/Documents/GitHub/Paper-for-Cox-PH-Model/codes/00-load-packages.R')
library(parallel)
library(Matrix)
library(trustOptim,lib.loc = libplace)
library(matrixStats) # for LogSumExp
library(purrr)
library(INLA,lib.loc = libplace)
library(survival)
library(mgcv)
library(mvQuad,lib.loc = libplace)
# tidyverse packages- required for analysis
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(lubridate)
library(trustOptim)
library(INLA)
library(mvQuad)
source('~/Documents/GitHub/Paper-for-Cox-PH-Model/codes/01-functions.R')
set.seed(123)
cores <- 4
RW2BINS <- 50
PARALLEL_EXECUTION <- TRUE
data <- kidney
data <- data_frame(times = data$time, entry = rep(0,nrow(data)),censoring = data$status, age = data$age, sex = data$sex, disease = data$disease, id = data$id)
data$disease <- relevel(data$disease,ref = "Other")
data <- arrange_data(data)
data$ID <- 1:nrow(data)
xdata <- data.frame(age = data$age,sex = data$sex,GN = ifelse(data$disease == "GN",1,0),AN = ifelse(data$disease == "AN",1,0),PKD = ifelse(data$disease == "PKD",1,0))
Blist <- list()
Blist$id <- create_blist_element(data$id)
iidnum <- Blist %>% map("B") %>% map(ncol) %>% reduce(sum)
model_data <- list(
X=as.matrix(xdata),
B = Blist,
M = iidnum,
n = length(unique(data$ID)),
Nd = length(unique(data$ID))-1
)
model_data$beta_logprec <- log(.05)
model_data$diffmat <- create_diff_matrix(model_data$n)
model_data$lambdainv <- create_full_dtcp_matrix(model_data$n)
model_data$Xd <- model_data$diffmat %*% model_data$X
model_data$B$id$Bd <- model_data$diffmat %*% model_data$B$id$B
model_data$p <- ncol(model_data$X)
model_data$Ne <- model_data$n
model_data$Wd <- model_data$M + model_data$p + model_data$Nd
model_data$Wdf <- model_data$M + model_data$p + model_data$Ne
model_data$times <- data$times
model_data$censoring <- data$censoring
model_data$entry <- data$entry
model_data$ID <- data$ID
model_data$theta_logprior <- function(theta,prior_alpha = c(.5),prior_u = c(2)) {
# In this model, theta is the LOG PRECISION of the rw2 smoothing variance
# Implement the PC prior directly.
# P(sigma > u) = alpha.
# See inla.doc("pc.prec")
lambda <- -log(prior_alpha)/prior_u
log(lambda/2) - lambda * exp(-theta/2) - theta/2
}
model_data$thetagrid <- mvQuad::createNIGrid(dim = 1,type = "GLe",level = 60)
mvQuad::rescale(model_data$thetagrid,domain = c(-1,8))
thetalist <- split(mvQuad::getNodes(model_data$thetagrid),rep(1:nrow(mvQuad::getNodes(model_data$thetagrid))))
# Random effect model specification data
model_data$modelspec <- model_data$B %>%
purrr::map("model") %>%
purrr::map2(.,names(.),~tibble(covariate = .y,model = .x)) %>%
purrr::reduce(bind_rows)
cat("Finished creating model data!\n")
#Optimization:
control1 <- list(
prec = 1e-08,
stop.trust.radius = 1e-10,
report.freq = 10,
report.level = 4,
start.trust.radius = 100,
contract.threshold = .25,
contract.factor = .5,
expand.factor = 3,
trust.iter = 2000,
maxit = 3000,
preconditioner = 0
)
tm <- proc.time()
sim1opt <- optimize_all_thetas_parallel(
theta = model_data$thetagrid,
model_data = model_data,
optcontrol = control1,
doparallel = PARALLEL_EXECUTION
)
rt <- proc.time() - tm
model_data$beta_logprec <- log(.001)
model_data$diffmat <- create_diff_matrix(model_data$n)
model_data$lambdainv <- create_full_dtcp_matrix(model_data$n)
model_data$Xd <- model_data$diffmat %*% model_data$X
model_data$B$id$Bd <- model_data$diffmat %*% model_data$B$id$B
model_data$p <- ncol(model_data$X)
model_data$Ne <- model_data$n
model_data$Wd <- model_data$M + model_data$p + model_data$Nd
model_data$Wdf <- model_data$M + model_data$p + model_data$Ne
model_data$times <- data$times
model_data$censoring <- data$censoring
model_data$entry <- data$entry
model_data$ID <- data$ID
model_data$theta_logprior <- function(theta,prior_alpha = c(.5),prior_u = c(2)) {
# In this model, theta is the LOG PRECISION of the rw2 smoothing variance
# Implement the PC prior directly.
# P(sigma > u) = alpha.
# See inla.doc("pc.prec")
lambda <- -log(prior_alpha)/prior_u
log(lambda/2) - lambda * exp(-theta/2) - theta/2
}
model_data$thetagrid <- mvQuad::createNIGrid(dim = 1,type = "GLe",level = 60)
mvQuad::rescale(model_data$thetagrid,domain = c(-1,8))
thetalist <- split(mvQuad::getNodes(model_data$thetagrid),rep(1:nrow(mvQuad::getNodes(model_data$thetagrid))))
# Random effect model specification data
model_data$modelspec <- model_data$B %>%
purrr::map("model") %>%
purrr::map2(.,names(.),~tibble(covariate = .y,model = .x)) %>%
purrr::reduce(bind_rows)
cat("Finished creating model data!\n")
#Optimization:
control1 <- list(
prec = 1e-08,
stop.trust.radius = 1e-10,
report.freq = 10,
report.level = 4,
start.trust.radius = 100,
contract.threshold = .25,
contract.factor = .5,
expand.factor = 3,
trust.iter = 2000,
maxit = 3000,
preconditioner = 0
)
tm <- proc.time()
sim1opt <- optimize_all_thetas_parallel(
theta = model_data$thetagrid,
model_data = model_data,
optcontrol = control1,
doparallel = PARALLEL_EXECUTION
)
rt <- proc.time() - tm
# Plots of marginal posteriors for hyperparameter
optresults_withlogpostpre <- add_log_posterior_values(sim1opt,model_data = model_data)
optresults_withlogpost <- normalize_optresults_logpost(optresults_withlogpostpre)
margpost1 <- marginal_hyperparameter_posterior(1,optresults_withlogpost)
priorfunc <- function(x) exp(model_data$theta_logprior(x))
priorfuncsigma <- function(x) (2/x) * exp(model_data$theta_logprior(-2*log(x)))
thetapostplot1 <- margpost1$margpost %>%
mutate(theta_post = exp(thetalogmargpost)) %>%
ggplot(aes(x = theta)) +
theme_classic() +
geom_line(aes(y = theta_post),colour = "red",size = 1) +
geom_line(aes(y = priorfunc(theta)),colour = "black",size = 0.5) +
labs(x = "",y = "") +
theme(text = element_text(size = 8))
thetapostplot1
sigmapostplot1 <- margpost1$margpost %>%
mutate(sigma_post = exp(sigmalogmargpost)) %>%
ggplot(aes(x = sigma)) +
theme_classic() +
geom_line(aes(y = sigma_post),colour = "black",linetype = "solid",size = 0.5) +
labs(x = "",y = "") +
geom_line(aes(y = priorfuncsigma(sigma)),colour = 'black',linetype = 'dashed',size = 0.5) +
theme(text = element_text(size = 8))
sigmapostplot1
# Posterior for Latent Field:
tm2 <- proc.time()
margmeans_and_vars <- compute_marginal_means_and_variances(
i = (model_data$Wd-model_data$M - model_data$p + 1):(model_data$Wd),
model_results <- optresults_withlogpostpre,
model_data <- model_data,
lincomb = NULL,
constrA = NULL
)
rt2 <- proc.time() - tm2
print(rt2)
margmeans_iid <- margmeans_and_vars$mean[1:model_data$M]
margmeans_beta <- margmeans_and_vars$mean[(model_data$M+1):length(margmeans_and_vars$mean)]
frailty <- margmeans_iid
u <- sort(unique(model_data$B$id$u))
table_for_fra_ours <- data_frame(id = u, frailty = frailty)
table_for_fra_ours
margmeans_beta
margmeans_and_vars
sqrt
sqrt(margmeans_and_vars$variance[41:43])
model_data$M
model_data$M
sqrt(margmeans_and_vars$variance[38:43])
sqrt(margmeans_and_vars$variance[39:43])
