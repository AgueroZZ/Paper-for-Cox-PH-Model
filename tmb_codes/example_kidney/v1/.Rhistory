### CoxPH regression for the kidney example ###
library(tidyverse)
library(aghq)
library(mgcv)
library(Matrix)
library(TMB)
library(INLA)
library(tmbstan)
library(brinla)
library(survival)
precompile()
TEXT_SIZE = 25
## tidy up the data:
data <- survival::kidney
data <- data.frame(times = data$time, status = data$status, age = data$age,sex = data$sex,GN = ifelse(data$disease == "GN",1,0),AN = ifelse(data$disease == "AN",1,0),PKD = ifelse(data$disease == "PKD",1,0), id = data$id)
data <- abcoxph:::arrange_data(data)
data$ranks <- rank(data$times, ties.method = "min")
X <- as(as.matrix(data[,c(3:7)]),"dgTMatrix")
B <- as(abcoxph:::create_blist_element(u = data$id)$B,"dgTMatrix")
n <- nrow(data)
D <- as(abcoxph:::create_diff_matrix(n), "dgTMatrix") ### n = K * N
### Setup TMB:
tmbdat <- list(
# Design matrix (random and fixed)
B = as(B,"dgTMatrix"),
X = as(X,"dgTMatrix"),
# Differencing matrix
D = as(D,"dgTMatrix"),
# Response
ranks = as.integer(data$ranks),
cens = as.integer(data$status),
# Prior params
u = 2,
alpha = 0.5,
betaprec = 0.001)
tmbparams <- list(
W = rep(0,ncol(B)+ncol(X)),
theta = 0 # -2log(sigma)
)
# TMB function template
compile("01_coxph_kidney.cpp")
dyn.load(dynlib("01_coxph_kidney"))
##### Fitting:
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "01_coxph_kidney",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
start_time <- Sys.time()
quad <- aghq::marginal_laplace_tmb(ff,18,0)
# Plot of theta posterior
prec_marg <- quad$marginals[[1]]
logpostsigma <- compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
with(logpostsigma,plot(transparam,pdf_transparam,type='l'))
# Inference for W
K <- ncol(B)
samps <- sample_marginal(quad,1000,interpolation = 'spline')
beta_est <- samps$samps[(K+1):nrow(samps$samps),]
end_time <- Sys.time()
runtime_aghq <- end_time - start_time
### summary of estimates:
post_means <- apply(samps$samps, 1, mean)
post_sds <- apply(samps$samps, 1, sd)
post_up <- apply(samps$samps, 1, quantile, probs = 0.975)
post_lo <- apply(samps$samps, 1, quantile, probs = 0.025)
post_sum_aghq <- data.frame(rbind(post_means,post_sds,post_up,post_lo))
rownames(post_sum_aghq) <- c("mean", "sd", "upper", "lower")
colnames(post_sum_aghq) <- c(c(1:K),"age","sex","GN","AN","PKD")
### Using INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
formula <- inla.surv(times,status)~ age + sex + GN + AN + PKD + f(id, model = "iid", hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.fixed = list(prec = 0.001), data = data, family = "coxph")
### beta:
Inlaresult$summary.fixed
### random effects:
Inlaresult$summary.random$id
### hyper-parameter:
inla_hyper <- brinla::bri.hyperpar.plot(Inlaresult, together = F)
inla_hyper <- inla_hyper %>% filter(parameter == "SD for id") %>% select(1:2) %>% mutate(method = "INLA")
aghq_hyper <- logpostsigma %>% select(c("transparam","pdf_transparam")) %>% mutate(method = "Proposed")
names(aghq_hyper)[1:2] <- c("x","y")
hyper <- rbind(inla_hyper,aghq_hyper)
hyper %>% ggplot(aes(x,y,color = method)) + geom_line() + xlim(c(0,3)) + xlab("SD") + ylab("density")
theta_logprior <- function(theta, prior_alpha = tmbdat$alpha,
prior_u = tmbdat$u) {
lambda <- -log(prior_alpha)/prior_u
log(lambda/2) - lambda * exp(-theta/2) - theta/2
}
priorfuncsigma <- function(x) (2/x) * exp(theta_logprior(-2 * log(x)))
prior <- tibble(x = hyper$x, y = priorfuncsigma(hyper$x), method = "Prior")
hyper <- rbind(prior,hyper)
hyper %>% ggplot(aes(x,y,color = method)) + geom_line() + xlim(c(0,2)) + xlab("SD") + ylab("density")
hyper %>% ggplot(aes(x,y,type = method)) + geom_line() + xlim(c(0,2)) + xlab("SD") + ylab("density")
hyper %>% ggplot(aes(x,y,type = method)) + geom_line() + xlim(c(0,2)) + xlab("SD") + ylab("density") + theme_classic(base_size = TEXT_SIZE)
samps <- sample_marginal(quad,1000,interpolation = 'spline')
warnings()
?sample_marginal
devtools::install_git("https://github.com/awstringer1/aghq")
library(aghq)
samps <- sample_marginal(quad,1000,interpolation = 'spline')
# AGHQ
start_time <- Sys.time()
quad <- aghq::marginal_laplace_tmb(ff,18,0)
# Plot of theta posterior
prec_marg <- quad$marginals[[1]]
logpostsigma <- compute_pdf_and_cdf(prec_marg,list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
with(logpostsigma,plot(transparam,pdf_transparam,type='l'))
# Inference for W
K <- ncol(B)
samps <- sample_marginal(quad,1000,interpolation = 'spline')
