silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,15,0)
# Plot of theta posterior
logpostsigma <- compute_pdf_and_cdf(quad$marginals[[1]],list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)),interpolation = 'spline')
with(logpostsigma,plot(transparam,pdf_transparam,type='l'))
# Inference for W
samps <- sample_marginal(quad,1000,interpolation = 'spline')
beta_est <- samps$samps[(K+1),]
hist(beta_est,breaks = 100)
### summary of estimates:
post_means <- apply(samps$samps, 1, mean)
post_sds <- apply(samps$samps, 1, sd)
post_up <- apply(samps$samps, 1, quantile, probs = 0.975)
post_lo <- apply(samps$samps, 1, quantile, probs = 0.025)
post_sum_aghq <- data.frame(rbind(post_means,post_sds,post_up,post_lo))
rownames(post_sum_aghq) <- c("mean", "sd", "upper", "lower")
colnames(post_sum_aghq) <- c(c(1:K),"beta")
### Using INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
formula <- inla.surv(t,cens)~ x + f(group, model = "iid", hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.fixed = list(prec = 0.001), data = dat, family = "coxph")
### beta:
Inlaresult$summary.fixed
### random effects:
Inlaresult$summary.random$group
### hyper-parameter:
brinla::bri.hyperpar.plot(Inlaresult, together = F)
####### Comparison:
### Fixed effect:
## Base R plot:
plot(x = Inlaresult$marginals.fixed$x[,1], y = Inlaresult$marginals.fixed$x[,2], col = "blue", type = 'l')
lines(x = seq(-0.1,1,by = 0.01), y = dnorm(seq(-0.1,1,by = 0.01), mean = post_sum_aghq[,(K+1)][1], sd = post_sum_aghq[,(K+1)][2]), col = "purple", type = "l", xlab = "beta", ylab = "density")
abline(v = beta, col = "red")
## ggplot:
fixplot <- data.frame(x = Inlaresult$marginals.fixed$x[,1], y = Inlaresult$marginals.fixed$x[,2], type = "INLA")
fixplot <- rbind(fixplot, data.frame(x = fixplot$x, y = dnorm(fixplot$x,mean = post_sum_aghq[,(K+1)][1], sd = post_sum_aghq[,(K+1)][2]), type = "AGHQ"))
fixplot %>% ggplot(aes(x = x, y = y, color = type)) + geom_line() + labs(x = "beta", y = "density", color = "Legend") +
theme(text = element_text(size = TEXT_SIZE), legend.title = element_blank()) + geom_vline(xintercept = beta, color = "red") +
scale_color_manual(values=c("purple","blue"))
### Random effects:
frailty <- data %>% select(c(group,true)) %>% arrange(group) %>% unique(by = group)
frailty$AGHQ <- as.numeric(post_sum_aghq[1,][-(K+1)])
frailty$INLA <- as.numeric(Inlaresult$summary.random$group$mean)
frailty
### Random effects: MSE
mean((frailty$true - frailty$AGHQ)^2)
mean((frailty$true - frailty$INLA)^2)
### Plot: 95 credible intervals
frailty$AGHQ_up <- as.numeric(post_sum_aghq[3,][-(K+1)])
frailty$INLA_up <- as.numeric(Inlaresult$summary.random$group$`0.975quant`)
frailty$AGHQ_lo <- as.numeric(post_sum_aghq[4,][-(K+1)])
frailty$INLA_lo <- as.numeric(Inlaresult$summary.random$group$`0.025quant`)
ggplot(data = frailty, aes(x = group, y = true)) + geom_point() + geom_errorbar(aes(ymax = AGHQ_up, ymin = AGHQ_lo), color = "purple") +
geom_errorbar(aes(ymax = INLA_up, ymin = INLA_lo), color = "blue") + theme(text = element_text(size = TEXT_SIZE)) + ylab("Frailty")
#### Approximate coverage rate in each case:
### AGHQ:
mean((frailty$true >= frailty$AGHQ_lo & frailty$true <= frailty$AGHQ_up))
### INLA:
mean((frailty$true >= frailty$INLA_lo & frailty$true <= frailty$INLA_up))
### Random effects: MSE
mean((frailty$true - frailty$AGHQ)^2)
mean((frailty$true - frailty$INLA)^2)
mean((frailty$true - frailty$STAN)^2)
#### Approximate coverage rate in each case:
### AGHQ:
mean((frailty$true >= frailty$AGHQ_lo & frailty$true <= frailty$AGHQ_up))
### INLA:
mean((frailty$true >= frailty$INLA_lo & frailty$true <= frailty$INLA_up))
### STAN:
mean((frailty$true >= frailty$STAN_lo & frailty$true <= frailty$STAN_up))
### Random effects: MSE
mean((frailty$true - frailty$AGHQ)^2)
mean((frailty$true - frailty$INLA)^2)
do_once <- function(seed,beta, N, K, sd, bas = "constant"){
set.seed(seed)
data <- Simulate_grouped_data(N = N, bas = bas, K = K, beta = beta, sdtheta = sd)
data <- abcoxph:::arrange_data(data)
dat <- tibble(x = data$x, t = data$times, cens = data$censoring, group = data$group)
dat$ranks <- rank(dat$t, ties.method = "min")
X <- as(as.matrix(dat$x),"dgTMatrix")
B <- as(abcoxph:::create_blist_element(u = dat$group)$B,"dgTMatrix")
D <- as(abcoxph:::create_diff_matrix(n), "dgTMatrix") ### n = K * N
### Setup TMB:
tmbdat <- list(
# Design matrix (random and fixed)
B = as(B,"dgTMatrix"),
X = as(X,"dgTMatrix"),
# Differencing matrix
D = as(D,"dgTMatrix"),
# Response
ranks = as.integer(dat$ranks),
cens = as.integer(dat$cens),
# Prior params
u = 1,
alpha = 0.5,
betaprec = 0.001)
tmbparams <- list(
W = rep(0,ncol(B)+ncol(X)),
theta = 0 # -2log(sigma)
)
##### Fitting:
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "02_coxph_frailty",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,3,0)
samps <- sample_marginal(quad,1000)
beta_est <- samps$samps[(K+1),]
post_means <- apply(samps$samps, 1, mean)
post_sds <- apply(samps$samps, 1, sd)
post_up <- apply(samps$samps, 1, quantile, probs = 0.975)
post_lo <- apply(samps$samps, 1, quantile, probs = 0.025)
post_sum_aghq <- data.frame(rbind(post_means,post_sds,post_up,post_lo))
rownames(post_sum_aghq) <- c("mean", "sd", "upper", "lower")
colnames(post_sum_aghq) <- c(c(1:K),"beta")
beta_cov_aghq <- ifelse(beta <= post_sum_aghq[,K+1][3] & beta >= post_sum_aghq[,K+1][4], 1, 0)
beta_mse_aghq <- (post_sum_aghq[,K+1][1] - beta)^2
### INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
formula <- inla.surv(t,cens)~ x + f(group, model = "iid", hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.fixed = list(prec = 0.001), data = dat, family = "coxph")
beta_cov_inla <- ifelse(beta <= Inlaresult$summary.fixed[2,]$'0.975quant' & beta >= Inlaresult$summary.fixed[2,]$'0.025quant', 1, 0)
beta_mse_inla <- (Inlaresult$summary.fixed[2,]$mean - beta)^2
frailty <- data %>% select(c(group,true)) %>% arrange(group) %>% unique(by = group)
frailty$AGHQ <- as.numeric(post_sum_aghq[1,][-(K+1)])
frailty$INLA <- as.numeric(Inlaresult$summary.random$group$mean)
### Random effects: MSE
frailty_mse_aghq <- mean((frailty$true - frailty$AGHQ)^2)
frailty_mse_inla <- mean((frailty$true - frailty$INLA)^2)
### Random effects: coverage
frailty$AGHQ_up <- as.numeric(post_sum_aghq[3,][-(K+1)])
frailty$INLA_up <- as.numeric(Inlaresult$summary.random$group$`0.975quant`)
frailty$AGHQ_lo <- as.numeric(post_sum_aghq[4,][-(K+1)])
frailty$INLA_lo <- as.numeric(Inlaresult$summary.random$group$`0.025quant`)
### AGHQ:
frailty_cov_aghq <- mean((frailty$true >= frailty$AGHQ_lo & frailty$true <= frailty$AGHQ_up))
### INLA:
frailty_cov_inla <- mean((frailty$true >= frailty$INLA_lo & frailty$true <= frailty$INLA_up))
result <- c(beta_cov_aghq,beta_cov_inla,beta_mse_aghq,beta_mse_inla,frailty_cov_aghq,frailty_cov_inla,frailty_mse_aghq,frailty_mse_inla)
result
}
do_once(seed = 2, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once(seed = 122, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once(seed = 102, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once_correction <- function(seed,beta, N, K, sd, bas = "constant"){
set.seed(seed)
data <- Simulate_grouped_data(N = N, bas = bas, K = K, beta = beta, sdtheta = sd)
data <- abcoxph:::arrange_data(data)
dat <- tibble(x = data$x, t = data$times, cens = data$censoring, group = data$group)
dat$ranks <- rank(dat$t, ties.method = "min")
X <- as(as.matrix(dat$x),"dgTMatrix")
B <- as(abcoxph:::create_blist_element(u = dat$group)$B,"dgTMatrix")
D <- as(abcoxph:::create_diff_matrix(n), "dgTMatrix") ### n = K * N
### Setup TMB:
tmbdat <- list(
# Design matrix (random and fixed)
B = as(B,"dgTMatrix"),
X = as(X,"dgTMatrix"),
# Differencing matrix
D = as(D,"dgTMatrix"),
# Response
ranks = as.integer(dat$ranks),
cens = as.integer(dat$cens),
# Prior params
u = 1,
alpha = 0.5,
betaprec = 0.001)
tmbparams <- list(
W = rep(0,ncol(B)+ncol(X)),
theta = 0 # -2log(sigma)
)
##### Fitting:
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "02_coxph_frailty",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,3,0)
samps <- sample_marginal(quad,1000)
beta_est <- samps$samps[(K+1),]
post_means <- apply(samps$samps, 1, mean)
post_sds <- apply(samps$samps, 1, sd)
post_up <- apply(samps$samps, 1, quantile, probs = 0.975)
post_lo <- apply(samps$samps, 1, quantile, probs = 0.025)
post_sum_aghq <- data.frame(rbind(post_means,post_sds,post_up,post_lo))
rownames(post_sum_aghq) <- c("mean", "sd", "upper", "lower")
colnames(post_sum_aghq) <- c(c(1:K),"beta")
beta_cov_aghq <- ifelse(beta <= post_sum_aghq[,K+1][3] & beta >= post_sum_aghq[,K+1][4], 1, 0)
beta_mse_aghq <- (post_sum_aghq[,K+1][1] - beta)^2
### INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
formula <- inla.surv(t,cens)~ x + f(group, model = "iid", hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.fixed = list(prec = 0.001), data = dat, family = "coxph", control.inla = list(correct = TRUE))
beta_cov_inla <- ifelse(beta <= Inlaresult$summary.fixed[2,]$'0.975quant' & beta >= Inlaresult$summary.fixed[2,]$'0.025quant', 1, 0)
beta_mse_inla <- (Inlaresult$summary.fixed[2,]$mean - beta)^2
frailty <- data %>% select(c(group,true)) %>% arrange(group) %>% unique(by = group)
frailty$AGHQ <- as.numeric(post_sum_aghq[1,][-(K+1)])
frailty$INLA <- as.numeric(Inlaresult$summary.random$group$mean)
### Random effects: MSE
frailty_mse_aghq <- mean((frailty$true - frailty$AGHQ)^2)
frailty_mse_inla <- mean((frailty$true - frailty$INLA)^2)
### Random effects: coverage
frailty$AGHQ_up <- as.numeric(post_sum_aghq[3,][-(K+1)])
frailty$INLA_up <- as.numeric(Inlaresult$summary.random$group$`0.975quant`)
frailty$AGHQ_lo <- as.numeric(post_sum_aghq[4,][-(K+1)])
frailty$INLA_lo <- as.numeric(Inlaresult$summary.random$group$`0.025quant`)
### AGHQ:
frailty_cov_aghq <- mean((frailty$true >= frailty$AGHQ_lo & frailty$true <= frailty$AGHQ_up))
### INLA:
frailty_cov_inla <- mean((frailty$true >= frailty$INLA_lo & frailty$true <= frailty$INLA_up))
result <- c(beta_cov_aghq,beta_cov_inla,beta_mse_aghq,beta_mse_inla,frailty_cov_aghq,frailty_cov_inla,frailty_mse_aghq,frailty_mse_inla)
result
}
do_once_correction(seed = 102, beta = beta, N = N, K = K, sd = sd, bas = "constant")
?inla
?control.inla
do_once_correction(seed = 102, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once_correction
do_once_correction <- function(seed,beta, N, K, sd, bas = "constant"){
set.seed(seed)
data <- Simulate_grouped_data(N = N, bas = bas, K = K, beta = beta, sdtheta = sd)
data <- abcoxph:::arrange_data(data)
dat <- tibble(x = data$x, t = data$times, cens = data$censoring, group = data$group)
dat$ranks <- rank(dat$t, ties.method = "min")
X <- as(as.matrix(dat$x),"dgTMatrix")
B <- as(abcoxph:::create_blist_element(u = dat$group)$B,"dgTMatrix")
D <- as(abcoxph:::create_diff_matrix(n), "dgTMatrix") ### n = K * N
### Setup TMB:
tmbdat <- list(
# Design matrix (random and fixed)
B = as(B,"dgTMatrix"),
X = as(X,"dgTMatrix"),
# Differencing matrix
D = as(D,"dgTMatrix"),
# Response
ranks = as.integer(dat$ranks),
cens = as.integer(dat$cens),
# Prior params
u = 1,
alpha = 0.5,
betaprec = 0.001)
tmbparams <- list(
W = rep(0,ncol(B)+ncol(X)),
theta = 0 # -2log(sigma)
)
##### Fitting:
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "02_coxph_frailty",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,3,0)
samps <- sample_marginal(quad,1000)
beta_est <- samps$samps[(K+1),]
post_means <- apply(samps$samps, 1, mean)
post_sds <- apply(samps$samps, 1, sd)
post_up <- apply(samps$samps, 1, quantile, probs = 0.975)
post_lo <- apply(samps$samps, 1, quantile, probs = 0.025)
post_sum_aghq <- data.frame(rbind(post_means,post_sds,post_up,post_lo))
rownames(post_sum_aghq) <- c("mean", "sd", "upper", "lower")
colnames(post_sum_aghq) <- c(c(1:K),"beta")
beta_cov_aghq <- ifelse(beta <= post_sum_aghq[,K+1][3] & beta >= post_sum_aghq[,K+1][4], 1, 0)
beta_mse_aghq <- (post_sum_aghq[,K+1][1] - beta)^2
### INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
formula <- inla.surv(t,cens)~ x + f(group, model = "iid", hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.fixed = list(prec = 0.001), data = dat, family = "coxph", control.inla = list(control.correct
= list(correct = TRUE)))
beta_cov_inla <- ifelse(beta <= Inlaresult$summary.fixed[2,]$'0.975quant' & beta >= Inlaresult$summary.fixed[2,]$'0.025quant', 1, 0)
beta_mse_inla <- (Inlaresult$summary.fixed[2,]$mean - beta)^2
frailty <- data %>% select(c(group,true)) %>% arrange(group) %>% unique(by = group)
frailty$AGHQ <- as.numeric(post_sum_aghq[1,][-(K+1)])
frailty$INLA <- as.numeric(Inlaresult$summary.random$group$mean)
### Random effects: MSE
frailty_mse_aghq <- mean((frailty$true - frailty$AGHQ)^2)
frailty_mse_inla <- mean((frailty$true - frailty$INLA)^2)
### Random effects: coverage
frailty$AGHQ_up <- as.numeric(post_sum_aghq[3,][-(K+1)])
frailty$INLA_up <- as.numeric(Inlaresult$summary.random$group$`0.975quant`)
frailty$AGHQ_lo <- as.numeric(post_sum_aghq[4,][-(K+1)])
frailty$INLA_lo <- as.numeric(Inlaresult$summary.random$group$`0.025quant`)
### AGHQ:
frailty_cov_aghq <- mean((frailty$true >= frailty$AGHQ_lo & frailty$true <= frailty$AGHQ_up))
### INLA:
frailty_cov_inla <- mean((frailty$true >= frailty$INLA_lo & frailty$true <= frailty$INLA_up))
result <- c(beta_cov_aghq,beta_cov_inla,beta_mse_aghq,beta_mse_inla,frailty_cov_aghq,frailty_cov_inla,frailty_mse_aghq,frailty_mse_inla)
result
}
do_once_correction(seed = 102, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once_correction(seed = 102, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once(seed = 102, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once(seed = 12, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once_correction(seed = 12, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once(seed = 123, beta = beta, N = N, K = K, sd = sd, bas = "constant")
Inlaresult
Inlaresult$summary.fixed
Inlaresult$summary.fixed[2,]
beta
do_once(seed = 23, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once(seed = 203, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once(seed = 300, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once(seed = 120, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once(seed = 11, beta = beta, N = N, K = K, sd = sd, bas = "constant")
View(aggresult)
do_once(seed = 111, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once(seed = 115, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once(seed = 117, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once <- function(seed,beta, N, K, sd, bas = "constant"){
set.seed(seed)
data <- Simulate_grouped_data(N = N, bas = bas, K = K, beta = beta, sdtheta = sd)
data <- abcoxph:::arrange_data(data)
dat <- tibble(x = data$x, t = data$times, cens = data$censoring, group = data$group)
dat$ranks <- rank(dat$t, ties.method = "min")
X <- as(as.matrix(dat$x),"dgTMatrix")
B <- as(abcoxph:::create_blist_element(u = dat$group)$B,"dgTMatrix")
D <- as(abcoxph:::create_diff_matrix(n), "dgTMatrix") ### n = K * N
### Setup TMB:
tmbdat <- list(
# Design matrix (random and fixed)
B = as(B,"dgTMatrix"),
X = as(X,"dgTMatrix"),
# Differencing matrix
D = as(D,"dgTMatrix"),
# Response
ranks = as.integer(dat$ranks),
cens = as.integer(dat$cens),
# Prior params
u = 1,
alpha = 0.5,
betaprec = 0.001)
tmbparams <- list(
W = rep(0,ncol(B)+ncol(X)),
theta = 0 # -2log(sigma)
)
##### Fitting:
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "02_coxph_frailty",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,3,0)
samps <- sample_marginal(quad,1000)
beta_est <- samps$samps[(K+1),]
post_means <- apply(samps$samps, 1, mean)
post_sds <- apply(samps$samps, 1, sd)
post_up <- apply(samps$samps, 1, quantile, probs = 0.975)
post_lo <- apply(samps$samps, 1, quantile, probs = 0.025)
post_sum_aghq <- data.frame(rbind(post_means,post_sds,post_up,post_lo))
rownames(post_sum_aghq) <- c("mean", "sd", "upper", "lower")
colnames(post_sum_aghq) <- c(c(1:K),"beta")
beta_cov_aghq <- ifelse(beta <= post_sum_aghq[,K+1][3] & beta >= post_sum_aghq[,K+1][4], 1, 0)
beta_mse_aghq <- (post_sum_aghq[,K+1][1] - beta)^2
### INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
formula <- inla.surv(t,cens)~ x + f(group, model = "iid", hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.fixed = list(prec = 0.001), data = dat, family = "coxph")
beta_cov_inla <- ifelse(beta <= Inlaresult$summary.fixed[2,]$'0.975quant' & beta >= Inlaresult$summary.fixed[2,]$'0.025quant', 1, 0)
beta_mse_inla <- (Inlaresult$summary.fixed[2,]$mean - beta)^2
frailty <- data %>% select(c(group,true)) %>% arrange(group) %>% unique(by = group)
frailty$AGHQ <- as.numeric(post_sum_aghq[1,][-(K+1)])
frailty$INLA <- as.numeric(Inlaresult$summary.random$group$mean)
### Random effects: MSE
frailty_mse_aghq <- mean((frailty$true - frailty$AGHQ)^2)
frailty_mse_inla <- mean((frailty$true - frailty$INLA)^2)
### Random effects: coverage
frailty$AGHQ_up <- as.numeric(post_sum_aghq[3,][-(K+1)])
frailty$INLA_up <- as.numeric(Inlaresult$summary.random$group$`0.975quant`)
frailty$AGHQ_lo <- as.numeric(post_sum_aghq[4,][-(K+1)])
frailty$INLA_lo <- as.numeric(Inlaresult$summary.random$group$`0.025quant`)
### AGHQ:
frailty_cov_aghq <- mean((frailty$true >= frailty$AGHQ_lo & frailty$true <= frailty$AGHQ_up))
### INLA:
frailty_cov_inla <- mean((frailty$true >= frailty$INLA_lo & frailty$true <= frailty$INLA_up))
result <- c(beta_cov_aghq,beta_cov_inla,beta_mse_aghq,beta_mse_inla,frailty_cov_aghq,frailty_cov_inla,frailty_mse_aghq,frailty_mse_inla)
result
}
ncores = 4
registerDoMC(ncores)
time_begin <- Sys.time()
result2 <- foreach(i = 1:100,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq')) %dopar% do_once(seed = i, beta = beta, N = N, K = K, sd = sd, bas = "constant")
time_end <- Sys.time()
time_end - time_begin
agg_means <- apply(result2, 2, mean)
agg_table <- matrix(agg_means, ncol=2, nrow = 4, byrow = T)
colnames(agg_table) <- c("AGHQ","INLA")
rownames(agg_table) <- c("beta_cover","beta_mse", "frailty_cover", "frailty_mse")
agg_table
result2
do_once(seed = 6, beta = beta, N = N, K = K, sd = sd, bas = "constant")
do_once_correction(seed = 6, beta = beta, N = N, K = K, sd = sd, bas = "constant")
seed = 6
set.seed(seed)
data <- Simulate_grouped_data(N = N, bas = bas, K = K, beta = beta, sdtheta = sd)
data <- abcoxph:::arrange_data(data)
dat <- tibble(x = data$x, t = data$times, cens = data$censoring, group = data$group)
dat$ranks <- rank(dat$t, ties.method = "min")
X <- as(as.matrix(dat$x),"dgTMatrix")
B <- as(abcoxph:::create_blist_element(u = dat$group)$B,"dgTMatrix")
D <- as(abcoxph:::create_diff_matrix(n), "dgTMatrix") ### n = K * N
### Setup TMB:
tmbdat <- list(
# Design matrix (random and fixed)
B = as(B,"dgTMatrix"),
X = as(X,"dgTMatrix"),
# Differencing matrix
D = as(D,"dgTMatrix"),
# Response
ranks = as.integer(dat$ranks),
cens = as.integer(dat$cens),
# Prior params
u = 1,
alpha = 0.5,
betaprec = 0.001)
tmbparams <- list(
W = rep(0,ncol(B)+ncol(X)),
theta = 0 # -2log(sigma)
)
##### Fitting:
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "02_coxph_frailty",
silent = TRUE
)
bas = "constant"
set.seed(seed)
data <- Simulate_grouped_data(N = N, bas = bas, K = K, beta = beta, sdtheta = sd)
data <- abcoxph:::arrange_data(data)
dat <- tibble(x = data$x, t = data$times, cens = data$censoring, group = data$group)
dat$ranks <- rank(dat$t, ties.method = "min")
X <- as(as.matrix(dat$x),"dgTMatrix")
B <- as(abcoxph:::create_blist_element(u = dat$group)$B,"dgTMatrix")
D <- as(abcoxph:::create_diff_matrix(n), "dgTMatrix") ### n = K * N
### Setup TMB:
tmbdat <- list(
# Design matrix (random and fixed)
B = as(B,"dgTMatrix"),
X = as(X,"dgTMatrix"),
# Differencing matrix
D = as(D,"dgTMatrix"),
# Response
ranks = as.integer(dat$ranks),
cens = as.integer(dat$cens),
# Prior params
u = 1,
alpha = 0.5,
betaprec = 0.001)
tmbparams <- list(
W = rep(0,ncol(B)+ncol(X)),
theta = 0 # -2log(sigma)
)
##### Fitting:
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "02_coxph_frailty",
silent = TRUE
)
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,3,0)
samps <- sample_marginal(quad,1000)
beta_est <- samps$samps[(K+1),]
post_means <- apply(samps$samps, 1, mean)
post_sds <- apply(samps$samps, 1, sd)
post_up <- apply(samps$samps, 1, quantile, probs = 0.975)
post_lo <- apply(samps$samps, 1, quantile, probs = 0.025)
post_sum_aghq <- data.frame(rbind(post_means,post_sds,post_up,post_lo))
rownames(post_sum_aghq) <- c("mean", "sd", "upper", "lower")
colnames(post_sum_aghq) <- c(c(1:K),"beta")
beta_cov_aghq <- ifelse(beta <= post_sum_aghq[,K+1][3] & beta >= post_sum_aghq[,K+1][4], 1, 0)
beta_mse_aghq <- (post_sum_aghq[,K+1][1] - beta)^2
### INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
formula <- inla.surv(t,cens)~ x + f(group, model = "iid", hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.fixed = list(prec = 0.001), data = dat, family = "coxph")
Inlaresult
Inlaresult$summary.fixed
post_sum_aghq
