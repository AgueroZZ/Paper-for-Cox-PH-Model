if (data$censoring[i] == 1) {data$censoring[i] <- rbinom(n = 1,size = 1,prob = 0.9)}
}
data$group <- rep(1:K, each = N)
data$true <- u
}
data
}
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(1, 0.5)))
# TMB function template
# compile("03_coxph_frailty.cpp")
dyn.load(dynlib("03_coxph_frailty"))
######### Speeding up the simulation function:
do_once <- function(seed,beta, N, K, sd, bas = "constant"){
set.seed(seed)
n <- K*N
data <- Simulate_grouped_data(N = N, bas = bas, K = K, beta = beta, sdtheta = sd)
data <- abcoxph:::arrange_data(data)
dat <- tibble(x = data$x, t = data$times, cens = data$censoring, group = data$group)
dat$ranks <- rank(dat$t, ties.method = "min")
X <- as(as.matrix(dat$x),"dgTMatrix")
B <- as(abcoxph:::create_blist_element(u = dat$group)$B,"dgTMatrix")
D <- as(abcoxph:::create_diff_matrix(n), "dgTMatrix") ### n = K * N
### Setup TMB:
tmbdat <- list(
# Design matrix (random and fixed)
B = as(B,"dgTMatrix"),
X = as(X,"dgTMatrix"),
# Differencing matrix
D = as(D,"dgTMatrix"),
# Response
ranks = as.integer(dat$ranks),
cens = as.integer(dat$cens),
# Prior params
u = 1,
alpha = 0.5,
betaprec = 0.001)
tmbparams <- list(
W = rep(0,ncol(B)+ncol(X)),
theta = 0 # -2log(sigma)
)
##### Fitting:
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "03_coxph_frailty",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,15,0)
samps <- sample_marginal(quad,2000)
beta_est <- samps$samps[(K+1),]
post_means <- apply(samps$samps, 1, mean)
post_sds <- apply(samps$samps, 1, sd)
post_up <- apply(samps$samps, 1, quantile, probs = 0.975)
post_lo <- apply(samps$samps, 1, quantile, probs = 0.025)
post_sum_aghq <- data.frame(rbind(post_means,post_sds,post_up,post_lo))
rownames(post_sum_aghq) <- c("mean", "sd", "upper", "lower")
colnames(post_sum_aghq) <- c(c(1:K),"beta")
beta_cov_aghq <- ifelse(beta <= post_sum_aghq[,K+1][3] & beta >= post_sum_aghq[,K+1][4], 1, 0)
beta_mse_aghq <- (post_sum_aghq[,K+1][1] - beta)^2
### INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
formula <- inla.surv(t,cens)~ x + f(group, model = "iid", hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.fixed = list(prec = 0.001), data = dat, family = "coxph")
beta_cov_inla <- ifelse(beta <= Inlaresult$summary.fixed[2,]$'0.975quant' & beta >= Inlaresult$summary.fixed[2,]$'0.025quant', 1, 0)
beta_mse_inla <- (Inlaresult$summary.fixed[2,]$mean - beta)^2
frailty <- data %>% select(c(group,true)) %>% arrange(group) %>% unique(by = group)
frailty$AGHQ <- as.numeric(post_sum_aghq[1,][-(K+1)])
frailty$INLA <- as.numeric(Inlaresult$summary.random$group$mean)
### Random effects: MSE
frailty_mse_aghq <- mean((frailty$true - frailty$AGHQ)^2)
frailty_mse_inla <- mean((frailty$true - frailty$INLA)^2)
### Random effects: coverage
frailty$AGHQ_up <- as.numeric(post_sum_aghq[3,][-(K+1)])
frailty$INLA_up <- as.numeric(Inlaresult$summary.random$group$`0.975quant`)
frailty$AGHQ_lo <- as.numeric(post_sum_aghq[4,][-(K+1)])
frailty$INLA_lo <- as.numeric(Inlaresult$summary.random$group$`0.025quant`)
### AGHQ:
frailty_cov_aghq <- mean((frailty$true >= frailty$AGHQ_lo & frailty$true <= frailty$AGHQ_up))
### INLA:
frailty_cov_inla <- mean((frailty$true >= frailty$INLA_lo & frailty$true <= frailty$INLA_up))
result <- c(beta_cov_aghq,beta_cov_inla,beta_mse_aghq,beta_mse_inla,frailty_cov_aghq,frailty_cov_inla,frailty_mse_aghq,frailty_mse_inla)
result
}
# ###### Constant
#
# ### N = 2
# time_begin <- Sys.time()
# result2 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 2, K = K, sd = sd, bas = "constant")
# time_end <- Sys.time()
# time_end - time_begin
# agg_means2 <- apply(result2, 2, mean)
#
#
# ## N = 4
# time_begin <- Sys.time()
# result4 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 4, K = K, sd = sd, bas = "constant")
# time_end <- Sys.time()
# time_end - time_begin
# agg_means4 <- apply(result4, 2, mean)
#
#
# ### N = 6
# time_begin <- Sys.time()
# result6 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq')) %dopar% do_once(seed = i, beta = beta, N = 6, K = K, sd = sd, bas = "constant")
# time_end <- Sys.time()
# time_end - time_begin
# agg_means6 <- apply(result6, 2, mean)
#
#
#
# ## N = 8
# time_begin <- Sys.time()
# result8 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 8, K = K, sd = sd, bas = "constant")
# time_end <- Sys.time()
# time_end - time_begin
# agg_means8 <- apply(result8, 2, mean)
#
#
# ## N = 10
# time_begin <- Sys.time()
# result10 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 10, K = K, sd = sd, bas = "constant")
# time_end <- Sys.time()
# time_end - time_begin
# agg_means10 <- apply(result10, 2, mean)
#
do_once(seed = 230, beta = beta, N = 2, K = K, sd = sd, bas = "piecewiseconstant")
do_once(seed = 130, beta = beta, N = 2, K = K, sd = sd, bas = "piecewiseconstant")
do_once(seed = 120, beta = beta, N = 2, K = K, sd = sd, bas = "piecewiseconstant")
do_once(seed = 110, beta = beta, N = 2, K = K, sd = sd, bas = "piecewiseconstant")
do_once(seed = 100, beta = beta, N = 2, K = K, sd = sd, bas = "piecewiseconstant")
do_once(seed = 10, beta = beta, N = 2, K = K, sd = sd, bas = "piecewiseconstant")
do_once(seed = 1234, beta = beta, N = 2, K = K, sd = sd, bas = "piecewiseconstant")
ggplot(baseline2,aes(x = time, y = hazard)) + geom_line() + theme(text = element_text(size = TEXT_SIZE))
ggplot(baseline,aes(x = time, y = hazard)) + geom_line() + theme(text = element_text(size = TEXT_SIZE))
### Coxph regression with frailty ###
# lib_loc <- '/home/ziang/lib'
# library(tidyverse, lib = lib_loc)
# library(aghq, lib = lib_loc)
# library(mgcv)
# library(Matrix)
# library(rstan, lib = lib_loc)
# library(TMB, lib = lib_loc)
# library(INLA, lib = lib_loc)
# library(tmbstan, lib = lib_loc)
# library(foreach, lib = lib_loc)
# library(doMC, lib = lib_loc)
# library(parallel)
# library(foreach)
# library(abcoxph, lib = lib_loc)
# library(mvQuad, lib = lib_loc)
library(tidyverse)
library(aghq)
library(mgcv)
library(Matrix)
library(rstan)
library(TMB)
library(INLA)
library(tmbstan)
library(foreach)
library(doMC)
library(parallel)
library(foreach)
library(abcoxph)
library(mvQuad)
precompile()
TEXT_SIZE = 25
ncores = 8
registerDoMC(ncores)
### Simulating function:
K = 50
beta = 0.2
sd = 0.8
M <- 300
N <- 2
Simulate_baseline3 <- function(timelim = 300, breaks = 0.001, cut = 5){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-0.01
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
### Try this baseline on the smoothing example as well
set.seed(1234)
baseline <- Simulate_baseline3()
Simulate_grouped_data <- function(N = 2, bas = "piecewiseconstant", K = 100, beta = 0.2, sdtheta = 0.8){
n <- N*K ### Total samples
if(bas == "piecewiseconstant") {
timelim <- baseline$timelim[1]
tdom <- baseline$time
haz <- baseline$hazard
true <- data.frame(time = tdom, hazard = haz)
u <- rnorm(K, sd = sdtheta)
u <- rep(u, each = N)
x <- rnorm(n, sd = 3)
eta <- u + beta*x
failtimes <- c()
r <- runif(n)
for (i in 1:n) {
hazz <- haz * exp(eta[i])
cumhaz <- cumsum(hazz*0.001)
Surv <- exp(-cumhaz)
Surv[1] <- 1
failtimes[i] <- tdom[colSums(outer(Surv, r[i], `>`))]
}
data <- data_frame(x = x,times = failtimes, entry = rep(0,length(length(u))),censoring = ifelse(failtimes >= timelim,yes = 0, no=1))
for (i in 1:length(data$censoring)) {
if (data$censoring[i] == 1) {data$censoring[i] <- rbinom(n = 1,size = 1,prob = 0.9)}
}
data$group <- rep(1:K, each = N)
data$true <- u
}
else if (bas == "regular") {
timelim <- 200
tdom <- seq(0, timelim, by = 0.001)
haz <- rep(0, length(tdom))
haz <- 0.2 * cos(0.15*tdom) + 0.3
true <- data.frame(time = tdom, hazard = haz)
u <- rnorm(K, sd = sdtheta)
u <- rep(u, each = N)
x <- rnorm(n, sd = 3)
eta <- u + beta*x
failtimes <- c()
r <- runif(n)
for (i in 1:n) {
hazz <- haz * exp(eta[i])
cumhaz <- cumsum(hazz*0.001)
Surv <- exp(-cumhaz)
Surv[1] <- 1
failtimes[i] <- tdom[colSums(outer(Surv, r[i], `>`))]
}
data <- data_frame(x = x,times = failtimes, entry = rep(0,length(length(u))),censoring = ifelse(failtimes >= timelim,yes = 0, no=1))
for (i in 1:length(data$censoring)) {
if (data$censoring[i] == 1) {data$censoring[i] <- rbinom(n = 1,size = 1,prob = 0.9)}
}
data$group <- rep(1:K, each = N)
data$true <- u
}
else if (bas == "constant") {
timelim <- 200
tdom <- seq(0, timelim, by = 0.001)
haz <- rep(0.05, length(tdom))
true <- data.frame(time = tdom, hazard = haz)
u <- rnorm(K, sd = sdtheta)
u <- rep(u, each = N)
x <- rnorm(n, sd = 3)
eta <- u + beta*x
failtimes <- c()
r <- runif(n)
for (i in 1:n) {
hazz <- haz * exp(eta[i])
cumhaz <- cumsum(hazz*0.001)
Surv <- exp(-cumhaz)
Surv[1] <- 1
failtimes[i] <- tdom[colSums(outer(Surv, r[i], `>`))]
}
data <- data_frame(x = x,times = failtimes, entry = rep(0,length(length(u))),censoring = ifelse(failtimes >= timelim,yes = 0, no=1))
for (i in 1:length(data$censoring)) {
if (data$censoring[i] == 1) {data$censoring[i] <- rbinom(n = 1,size = 1,prob = 0.9)}
}
data$group <- rep(1:K, each = N)
data$true <- u
}
else{
timelim <- 200
tdom <- seq(0, timelim, by = 0.001)
haz <- rep(0, length(tdom))
cut <- 40
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
haz[tdom<=high & tdom > low] <- 0.01
}
else if(i %% 2 == 0){
haz[tdom<=high & tdom > low] <- 0.25
}
}
true <- data.frame(time = tdom, hazard = haz)
u <- rnorm(K, sd = sdtheta)
u <- rep(u, each = N)
x <- rnorm(n, sd = 3)
eta <- u + beta*x
failtimes <- c()
r <- runif(n)
for (i in 1:n) {
hazz <- haz * exp(eta[i])
cumhaz <- cumsum(hazz*0.001)
Surv <- exp(-cumhaz)
Surv[1] <- 1
failtimes[i] <- tdom[colSums(outer(Surv, r[i], `>`))]
}
data <- data_frame(x = x,times = failtimes, entry = rep(0,length(length(u))),censoring = ifelse(failtimes >= timelim,yes = 0, no=1))
for (i in 1:length(data$censoring)) {
if (data$censoring[i] == 1) {data$censoring[i] <- rbinom(n = 1,size = 1,prob = 0.9)}
}
data$group <- rep(1:K, each = N)
data$true <- u
}
data
}
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(1, 0.5)))
# TMB function template
# compile("03_coxph_frailty.cpp")
dyn.load(dynlib("03_coxph_frailty"))
######### Speeding up the simulation function:
do_once <- function(seed,beta, N, K, sd, bas = "constant"){
set.seed(seed)
n <- K*N
data <- Simulate_grouped_data(N = N, bas = bas, K = K, beta = beta, sdtheta = sd)
data <- abcoxph:::arrange_data(data)
dat <- tibble(x = data$x, t = data$times, cens = data$censoring, group = data$group)
dat$ranks <- rank(dat$t, ties.method = "min")
X <- as(as.matrix(dat$x),"dgTMatrix")
B <- as(abcoxph:::create_blist_element(u = dat$group)$B,"dgTMatrix")
D <- as(abcoxph:::create_diff_matrix(n), "dgTMatrix") ### n = K * N
### Setup TMB:
tmbdat <- list(
# Design matrix (random and fixed)
B = as(B,"dgTMatrix"),
X = as(X,"dgTMatrix"),
# Differencing matrix
D = as(D,"dgTMatrix"),
# Response
ranks = as.integer(dat$ranks),
cens = as.integer(dat$cens),
# Prior params
u = 1,
alpha = 0.5,
betaprec = 0.001)
tmbparams <- list(
W = rep(0,ncol(B)+ncol(X)),
theta = 0 # -2log(sigma)
)
##### Fitting:
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "03_coxph_frailty",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,15,0)
samps <- sample_marginal(quad,2000)
beta_est <- samps$samps[(K+1),]
post_means <- apply(samps$samps, 1, mean)
post_sds <- apply(samps$samps, 1, sd)
post_up <- apply(samps$samps, 1, quantile, probs = 0.975)
post_lo <- apply(samps$samps, 1, quantile, probs = 0.025)
post_sum_aghq <- data.frame(rbind(post_means,post_sds,post_up,post_lo))
rownames(post_sum_aghq) <- c("mean", "sd", "upper", "lower")
colnames(post_sum_aghq) <- c(c(1:K),"beta")
beta_cov_aghq <- ifelse(beta <= post_sum_aghq[,K+1][3] & beta >= post_sum_aghq[,K+1][4], 1, 0)
beta_mse_aghq <- (post_sum_aghq[,K+1][1] - beta)^2
### INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
formula <- inla.surv(t,cens)~ x + f(group, model = "iid", hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.fixed = list(prec = 0.001), data = dat, family = "coxph")
beta_cov_inla <- ifelse(beta <= Inlaresult$summary.fixed[2,]$'0.975quant' & beta >= Inlaresult$summary.fixed[2,]$'0.025quant', 1, 0)
beta_mse_inla <- (Inlaresult$summary.fixed[2,]$mean - beta)^2
frailty <- data %>% select(c(group,true)) %>% arrange(group) %>% unique(by = group)
frailty$AGHQ <- as.numeric(post_sum_aghq[1,][-(K+1)])
frailty$INLA <- as.numeric(Inlaresult$summary.random$group$mean)
### Random effects: MSE
frailty_mse_aghq <- mean((frailty$true - frailty$AGHQ)^2)
frailty_mse_inla <- mean((frailty$true - frailty$INLA)^2)
### Random effects: coverage
frailty$AGHQ_up <- as.numeric(post_sum_aghq[3,][-(K+1)])
frailty$INLA_up <- as.numeric(Inlaresult$summary.random$group$`0.975quant`)
frailty$AGHQ_lo <- as.numeric(post_sum_aghq[4,][-(K+1)])
frailty$INLA_lo <- as.numeric(Inlaresult$summary.random$group$`0.025quant`)
### AGHQ:
frailty_cov_aghq <- mean((frailty$true >= frailty$AGHQ_lo & frailty$true <= frailty$AGHQ_up))
### INLA:
frailty_cov_inla <- mean((frailty$true >= frailty$INLA_lo & frailty$true <= frailty$INLA_up))
result <- c(beta_cov_aghq,beta_cov_inla,beta_mse_aghq,beta_mse_inla,frailty_cov_aghq,frailty_cov_inla,frailty_mse_aghq,frailty_mse_inla)
result
}
# ###### Constant
#
# ### N = 2
# time_begin <- Sys.time()
# result2 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 2, K = K, sd = sd, bas = "constant")
# time_end <- Sys.time()
# time_end - time_begin
# agg_means2 <- apply(result2, 2, mean)
#
#
# ## N = 4
# time_begin <- Sys.time()
# result4 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 4, K = K, sd = sd, bas = "constant")
# time_end <- Sys.time()
# time_end - time_begin
# agg_means4 <- apply(result4, 2, mean)
#
#
# ### N = 6
# time_begin <- Sys.time()
# result6 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq')) %dopar% do_once(seed = i, beta = beta, N = 6, K = K, sd = sd, bas = "constant")
# time_end <- Sys.time()
# time_end - time_begin
# agg_means6 <- apply(result6, 2, mean)
#
#
#
# ## N = 8
# time_begin <- Sys.time()
# result8 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 8, K = K, sd = sd, bas = "constant")
# time_end <- Sys.time()
# time_end - time_begin
# agg_means8 <- apply(result8, 2, mean)
#
#
# ## N = 10
# time_begin <- Sys.time()
# result10 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 10, K = K, sd = sd, bas = "constant")
# time_end <- Sys.time()
# time_end - time_begin
# agg_means10 <- apply(result10, 2, mean)
#
#
# ### Combine:
# aggresultCons <- rbind(agg_means2,agg_means4,agg_means6, agg_means8, agg_means10)
# colnames(aggresultCons) <- c("beta_cov_aghq","beta_cov_inla","beta_mse_aghq","beta_mse_inla","frailty_cov_aghq","frailty_cov_inla", "frailty_mse_aghq", "frailty_mse_inla")
# save(aggresultCons, file = "aggresultCons.Rda")
#
###### Step
### N = 2
time_begin <- Sys.time()
result2 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 2, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means2 <- apply(result2, 2, mean)
## N = 4
time_begin <- Sys.time()
result4 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 4, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means4 <- apply(result4, 2, mean)
### N = 6
time_begin <- Sys.time()
result6 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq')) %dopar% do_once(seed = i, beta = beta, N = 6, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means6 <- apply(result6, 2, mean)
## N = 8
time_begin <- Sys.time()
result8 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 8, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means8 <- apply(result8, 2, mean)
## N = 10
time_begin <- Sys.time()
result10 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 10, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means10 <- apply(result10, 2, mean)
### Combine:
aggresultStep <- rbind(agg_means2,agg_means4,agg_means6, agg_means8, agg_means10)
colnames(aggresultStep) <- c("beta_cov_aghq","beta_cov_inla","beta_mse_aghq","beta_mse_inla","frailty_cov_aghq","frailty_cov_inla", "frailty_mse_aghq", "frailty_mse_inla")
save(aggresultStep, file = "aggresultStep.Rda")
agg_means2
agg_means2
agg_means4
agg_means6
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStepSD2.Rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStepSD1.Rda")
SD1 = aggresultStep
SD1
SD1
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStepSD2.Rda")
SD2 = aggresultStep
SD2
SD1
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStepSD3.Rda")
SD3 = aggresultStep
SD3
SD1
SD2
SD3
