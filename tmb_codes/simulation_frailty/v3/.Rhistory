B = as(B,"dgTMatrix"),
X = as(X,"dgTMatrix"),
# Differencing matrix
D = as(D,"dgTMatrix"),
# Response
ranks = as.integer(dat$ranks),
cens = as.integer(dat$cens),
# Prior params
u = 1,
alpha = 0.5,
betaprec = 0.001)
tmbparams <- list(
W = rep(0,ncol(B)+ncol(X)),
theta = 0 # -2log(sigma)
)
##### Fitting:
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "03_coxph_frailty",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,15,0)
samps <- sample_marginal(quad,2000)
beta_est <- samps$samps[(K+1),]
post_means <- apply(samps$samps, 1, mean)
post_sds <- apply(samps$samps, 1, sd)
post_up <- apply(samps$samps, 1, quantile, probs = 0.975)
post_lo <- apply(samps$samps, 1, quantile, probs = 0.025)
post_sum_aghq <- data.frame(rbind(post_means,post_sds,post_up,post_lo))
rownames(post_sum_aghq) <- c("mean", "sd", "upper", "lower")
colnames(post_sum_aghq) <- c(c(1:K),"beta")
beta_cov_aghq <- ifelse(beta <= post_sum_aghq[,K+1][3] & beta >= post_sum_aghq[,K+1][4], 1, 0)
beta_mse_aghq <- (post_sum_aghq[,K+1][1] - beta)^2
### INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
formula <- inla.surv(t,cens)~ x + f(group, model = "iid", hyper = prior.prec)
Inlaresult <- inla(formula = formula, control.fixed = list(prec = 0.001), data = dat, family = "coxph")
beta_cov_inla <- ifelse(beta <= Inlaresult$summary.fixed[2,]$'0.975quant' & beta >= Inlaresult$summary.fixed[2,]$'0.025quant', 1, 0)
beta_mse_inla <- (Inlaresult$summary.fixed[2,]$mean - beta)^2
frailty <- data %>% select(c(group,true)) %>% arrange(group) %>% unique(by = group)
frailty$AGHQ <- as.numeric(post_sum_aghq[1,][-(K+1)])
frailty$INLA <- as.numeric(Inlaresult$summary.random$group$mean)
### Random effects: MSE
frailty_mse_aghq <- mean((frailty$true - frailty$AGHQ)^2)
frailty_mse_inla <- mean((frailty$true - frailty$INLA)^2)
### Random effects: coverage
frailty$AGHQ_up <- as.numeric(post_sum_aghq[3,][-(K+1)])
frailty$INLA_up <- as.numeric(Inlaresult$summary.random$group$`0.975quant`)
frailty$AGHQ_lo <- as.numeric(post_sum_aghq[4,][-(K+1)])
frailty$INLA_lo <- as.numeric(Inlaresult$summary.random$group$`0.025quant`)
### AGHQ:
frailty_cov_aghq <- mean((frailty$true >= frailty$AGHQ_lo & frailty$true <= frailty$AGHQ_up))
### INLA:
frailty_cov_inla <- mean((frailty$true >= frailty$INLA_lo & frailty$true <= frailty$INLA_up))
result <- c(beta_cov_aghq,beta_cov_inla,beta_mse_aghq,beta_mse_inla,frailty_cov_aghq,frailty_cov_inla,frailty_mse_aghq,frailty_mse_inla)
result
}
################### Add an example when Sigma = 1.6, run this one with a new seed
set.seed(123)
### Sigma = 1.6
sd = 1.6
### N = 1
time_begin <- Sys.time()
result1 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 1, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means1 <- apply(result1, 2, mean)
### N = 2
time_begin <- Sys.time()
result2 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 2, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means2 <- apply(result2, 2, mean)
## N = 3
time_begin <- Sys.time()
result3 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 3, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means3 <- apply(result3, 2, mean)
### N = 4
time_begin <- Sys.time()
result4 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq')) %dopar% do_once(seed = i, beta = beta, N = 4, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means4 <- apply(result4, 2, mean)
## N = 5
time_begin <- Sys.time()
result5 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 5, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means5 <- apply(result5, 2, mean)
## N = 10
time_begin <- Sys.time()
result10 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 10, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means10 <- apply(result10, 2, mean)
1:M
1:M + M
2*(1:M)
(1:M + M)
################### Add an example when Sigma = 1.6, run this one with a new seed
### Sigma = 1.6
sd = 1.6
### N = 1
time_begin <- Sys.time()
result1 <- foreach(i = (1:M + M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 1, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means1 <- apply(result1, 2, mean)
### N = 2
time_begin <- Sys.time()
result2 <- foreach(i = (1:M + M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 2, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means2 <- apply(result2, 2, mean)
## N = 3
time_begin <- Sys.time()
result3 <- foreach(i = (1:M + M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 3, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means3 <- apply(result3, 2, mean)
### N = 4
time_begin <- Sys.time()
result4 <- foreach(i = (1:M + M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq')) %dopar% do_once(seed = i, beta = beta, N = 4, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means4 <- apply(result4, 2, mean)
## N = 5
time_begin <- Sys.time()
result5 <- foreach(i = (1:M + M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 5, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means5 <- apply(result5, 2, mean)
## N = 10
time_begin <- Sys.time()
result10 <- foreach(i = (1:M + M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 10, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means10 <- apply(result10, 2, mean)
### Combine:
aggresultStep4 <- rbind(agg_means1, agg_means2,agg_means3,agg_means4, agg_means5, agg_means10)
colnames(aggresultStep4) <- c("beta_cov_aghq","beta_cov_inla","beta_mse_aghq","beta_mse_inla","frailty_cov_aghq","frailty_cov_inla", "frailty_mse_aghq", "frailty_mse_inla")
save(aggresultStep4, file = "aggresultStepSD4.Rda")
### Sigma = 1.6
sd = 1.6
### N = 1
time_begin <- Sys.time()
result1 <- foreach(i = (1:M + M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 1, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means1 <- apply(result1, 2, mean)
### Sigma = 1.6
sd = 1.6
### N = 1
time_begin <- Sys.time()
result1 <- foreach(i = (1:M + 2*M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 1, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means1 <- apply(result1, 2, mean)
### N = 2
time_begin <- Sys.time()
result2 <- foreach(i = (1:M + 3*M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 2, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means2 <- apply(result2, 2, mean)
agg_means2
agg_means1
## N = 3
time_begin <- Sys.time()
result3 <- foreach(i = 1:M,.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 3, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means3 <- apply(result3, 2, mean)
## N = 3
time_begin <- Sys.time()
result3 <- foreach(i = (1:M + 4*M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 3, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means3 <- apply(result3, 2, mean)
## N = 3
time_begin <- Sys.time()
result3 <- foreach(i = (1:M + 2*M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 3, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means3 <- apply(result3, 2, mean)
## N = 3
time_begin <- Sys.time()
result3 <- foreach(i = (1:M + 5*M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 3, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means3 <- apply(result3, 2, mean)
## N = 3
time_begin <- Sys.time()
result3 <- foreach(i = (1:M + 8*M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 3, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means3 <- apply(result3, 2, mean)
################### Add an example when Sigma = 1.3, run this one with a new seed
### Sigma = 1.3
sd = 1.3
### N = 1
time_begin <- Sys.time()
result1 <- foreach(i = (1:M + 2*M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 1, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means1 <- apply(result1, 2, mean)
### N = 2
time_begin <- Sys.time()
result2 <- foreach(i = (1:M + 3*M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 2, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means2 <- apply(result2, 2, mean)
## N = 3
time_begin <- Sys.time()
result3 <- foreach(i = (1:M + 4*M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 3, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means3 <- apply(result3, 2, mean)
### N = 4
time_begin <- Sys.time()
result4 <- foreach(i = (1:M + 5 * M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq')) %dopar% do_once(seed = i, beta = beta, N = 4, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means4 <- apply(result4, 2, mean)
## N = 5
time_begin <- Sys.time()
result5 <- foreach(i = (1:M + 6 * M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 5, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means5 <- apply(result5, 2, mean)
## N = 10
time_begin <- Sys.time()
result10 <- foreach(i = (1:M + 7 * M),.combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq', 'abcoxph')) %dopar% do_once(seed = i, beta = beta, N = 10, K = K, sd = sd, bas = "piecewiseconstant")
time_end <- Sys.time()
time_end - time_begin
agg_means10 <- apply(result10, 2, mean)
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/output_yesterday/aggresultStepSD2.Rda")
### Combine:
aggresultStep4 <- rbind(agg_means1, agg_means2,agg_means3,agg_means4, agg_means5, agg_means10)
colnames(aggresultStep4) <- c("beta_cov_aghq","beta_cov_inla","beta_mse_aghq","beta_mse_inla","frailty_cov_aghq","frailty_cov_inla", "frailty_mse_aghq", "frailty_mse_inla")
save(aggresultStep4, file = "aggresultStepSD4.Rda")
View(aggresultStep4)
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStepSD1.Rda")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStepSD2.Rda")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStepSD3.Rda")
View(aggresultStep1)
View(aggresultStep2)
View(aggresultStep3)
View(aggresultStep3)
View(aggresultStep4)
getwd()
### Load:
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStep1")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStep2")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStep3")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStep4")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStep1.rda")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStepSD3.rda")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStepSD3.rda")
View(aggresultStep3)
result <- aggresultStep3
result
names(result)
rownames(result)
result$m <- c(1,2,3,4,5,10)
result
result <- aggresultStep3
result
result[1,]
result <- tibble(aggresultStep3)
library(tidyverse)
result <- tibble(aggresultStep3)
result
result$m <- c(1,2,3,4,5,10)
result
colnames(result)
names(result)
### Load:
library(tidyverse)
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStepSD3.rda")
###
result <- tibble(aggresultStep3)
result <- as_tibble(aggresultStep3)
result
### Load:
library(tidyverse)
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStepSD3.rda")
###
result <- as_tibble(aggresultStep3)
result$m <- c(1,2,3,4,5,10)
names(result)
### change names
result <- as_tibble(aggresultStep3)
result$m <- c(1,2,3,4,5,10)
names(result)
result
betaMSE <- tibble(MSE = c(result$beta_mse_aghq, result$frailty_mse_inla), Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
betaMSE
betaMSE %>% ggplot(aes(x = m, y = MSE, color = Type)) + geom_point()
### point plot for beta MSE:
betaMSE <- tibble(MSE = c(result$beta_mse_aghq, result$frailty_mse_inla),
m = result$m,
Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
betaMSE %>% ggplot(aes(x = m, y = MSE, color = Type)) + geom_point()
betaMSE
### point plot for beta MSE:
betaMSE <- tibble(MSE = c(result$beta_mse_aghq, result$frailty_mse_inla),
m = result$m,
Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
### point plot for beta MSE:
betaMSE <- tibble(MSE = c(result$beta_mse_aghq, result$frailty_mse_inla),
m = c(result$m, result$m),
Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
betaMSE %>% ggplot(aes(x = m, y = MSE, color = Type)) + geom_point()
### point plot for beta MSE:
betaMSE <- tibble(MSE = c(result$beta_mse_aghq, result$frailty_mse_inla),
m = c(result$m, result$m),
Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
betaMSE %>% ggplot(aes(x = m, y = MSE, color = Type)) + geom_point() + theme_classic(base_size = TEXT_SIZE)
TEXT_SIZE = 25
betaMSE %>% ggplot(aes(x = m, y = MSE, color = Type)) + geom_point() + theme_classic(base_size = TEXT_SIZE)
betaMSE %>% ggplot(aes(x = m, y = MSE, color = Type)) + geom_point() +
theme_classic(base_size = TEXT_SIZE) +
theme(legend.position = "none")
betaMSE %>% ggplot(aes(x = m, y = MSE, color = Type)) + geom_point() +
theme_classic(base_size = TEXT_SIZE) +
scale_x_continuous(breaks=c(1,2,3,4,5,10)) +
theme(legend.position = "none")
betaMSE %>% ggplot(aes(x = m, y = MSE, color = Type)) + geom_point() +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
scale_x_continuous(breaks=c(1,2,3,4,5,10)) +
theme(legend.position = "none")
betaMSE %>% ggplot(aes(x = m, y = MSE, color = Type)) + geom_point() +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
scale_x_continuous(breaks=c(1:10)) +
theme(legend.position = "none")
### point plot for beta MSE:
betaMSE <- tibble(MSE = c(result$beta_mse_aghq, result$beta_mse_inla),
m = c(result$m, result$m),
Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
betaMSE %>% ggplot(aes(x = m, y = MSE, color = Type)) + geom_point() +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
scale_x_continuous(breaks=c(1:10)) +
theme(legend.position = "none")
betaCov %>% ggplot(aes(x = m, y = Cov, color = Type)) + geom_point() +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
scale_x_continuous(breaks=c(1:10)) +
theme(legend.position = "none") + ylab("Coverage Prob")
### point plot for beta MSE:
betaCov <- tibble(Cov = c(result$beta_cov_aghq, result$beta_cov_inla),
m = c(result$m, result$m),
Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
betaCov %>% ggplot(aes(x = m, y = Cov, color = Type)) + geom_point() +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
scale_x_continuous(breaks=c(1:10)) +
theme(legend.position = "none") + ylab("Coverage Prob")
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) + geom_boxplot() +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
scale_x_continuous(breaks=c(1:10)) +
theme(legend.position = "none") + ylab("Coverage Prob")
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) + geom_boxplot() +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
theme(legend.position = "none") + ylab("Coverage Prob")
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) + geom_col(position = "dodge") +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
theme(legend.position = "none") + ylab("Coverage Prob")
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) + geom_col(position = "dodge") +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
scale_y_continuous(breaks = c(0.75, 0.85, 0.95, 1))
theme(legend.position = "none") + ylab("Coverage Prob")
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) + geom_col(position = "dodge") +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
ylim(c(0.75,1)) +
theme(legend.position = "none") + ylab("Coverage Prob")
?ylim
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) + geom_col(position = "dodge") +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
ylim(0.75, 1) +
theme(legend.position = "none") + ylab("Coverage Prob")
betaCov
### point plot for beta MSE:
betaCov <- tibble(Cov = c(result$beta_cov_aghq, result$beta_cov_inla),
m = c(result$m, result$m),
Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) + geom_col(position = "dodge") +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
ylim(0.75, 1) +
theme(legend.position = "none") + ylab("Coverage Prob")
?geom_col
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) + geom_col(position = "dodge") +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
ylim(0.75, 1) +
theme(legend.position = "none") + ylab("Coverage Prob")
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) + geom_col(position = "dodge") +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
ylim(0.55, 1) +
theme(legend.position = "none") + ylab("Coverage Prob")
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) + geom_col(position = "dodge") +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
ylim(0.15, 1) +
theme(legend.position = "none") + ylab("Coverage Prob")
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) + geom_col(position = "dodge") +
geom_line() +
theme_classic(base_size = TEXT_SIZE)  +
theme(legend.position = "none") + ylab("Coverage Prob")
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) +
geom_col(position = "dodge") +
ylim(0.75,1) +
theme_classic(base_size = TEXT_SIZE)  +
theme(legend.position = "none") + ylab("Coverage Prob")
betaCov
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) +
geom_col(position = "dodge") + coord_cartesian(ylim=c(0.75,1)) +
theme_classic(base_size = TEXT_SIZE)  +
theme(legend.position = "none") + ylab("Coverage Prob")
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) +
geom_col(position = "dodge") + coord_cartesian(ylim=c(0.85,1)) +
theme_classic(base_size = TEXT_SIZE)  +
theme(legend.position = "none") + ylab("Coverage Prob")
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) +
geom_col(position = "dodge") + coord_cartesian(ylim=c(0.85,1)) +
theme_classic(base_size = TEXT_SIZE) +
geom_hline(yintercept = 0.95, color = "red") +
theme(legend.position = "none") + ylab("Coverage Prob") + xlab("m")
fraMSE <- tibble(MSE = c(result$frailty_mse_aghq, result$frailty_mse_inla),
m = c(result$m, result$m),
Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
fraMSE %>% ggplot(aes(x = m, y = MSE, color = Type)) + geom_point() +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
scale_x_continuous(breaks=c(1:10)) +
theme(legend.position = "none")
### point plot for beta MSE:
fraCov <- tibble(Cov = c(result$frailty_cov_aghq, result$frailty_cov_inla),
m = c(result$m, result$m),
Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
fraCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) +
geom_col(position = "dodge") + coord_cartesian(ylim=c(0.85,1)) +
theme_classic(base_size = TEXT_SIZE) +
geom_hline(yintercept = 0.95, color = "red") +
theme(legend.position = "none") + ylab("Coverage Prob") + xlab("m")
fraCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) +
geom_col(position = "dodge") + coord_cartesian(ylim=c(0.45,1)) +
theme_classic(base_size = TEXT_SIZE) +
geom_hline(yintercept = 0.95, color = "red") +
theme(legend.position = "none") + ylab("Coverage Prob") + xlab("m")
### Load:
library(tidyverse)
TEXT_SIZE = 25
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_frailty/v3/aggresultStepSD3.rda")
### change names:
result <- as_tibble(aggresultStep3)
result$m <- c(1,2,3,4,5,10)
names(result)
### point plot for beta MSE:
betaMSE <- tibble(MSE = c(result$beta_mse_aghq, result$beta_mse_inla),
m = c(result$m, result$m),
Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
betaMSE %>% ggplot(aes(x = m, y = MSE, color = Type)) + geom_point() +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
scale_x_continuous(breaks=c(1:10)) +
theme(legend.position = "none")
### point plot for beta Cov:
betaCov <- tibble(Cov = c(result$beta_cov_aghq, result$beta_cov_inla),
m = c(result$m, result$m),
Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
betaCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) +
geom_col(position = "dodge") + coord_cartesian(ylim=c(0.85,1)) +
theme_classic(base_size = TEXT_SIZE) +
geom_hline(yintercept = 0.95, color = "red") +
theme(legend.position = "none") + ylab("Coverage Prob") + xlab("m")
### point plot for frailty MSE:
fraMSE <- tibble(MSE = c(result$frailty_mse_aghq, result$frailty_mse_inla),
m = c(result$m, result$m),
Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
fraMSE %>% ggplot(aes(x = m, y = MSE, color = Type)) + geom_point() +
geom_line() +
theme_classic(base_size = TEXT_SIZE) +
scale_x_continuous(breaks=c(1:10)) +
theme(legend.position = "none")
### point plot for frailty Cov:
fraCov <- tibble(Cov = c(result$frailty_cov_aghq, result$frailty_cov_inla),
m = c(result$m, result$m),
Type = c(rep("Proposed", nrow(result)), rep("INLA", nrow(result))))
fraCov %>% ggplot(aes(x = as.factor(m), y = Cov, fill = Type)) +
geom_col(position = "dodge") + coord_cartesian(ylim=c(0.45,1)) +
theme_classic(base_size = TEXT_SIZE) +
geom_hline(yintercept = 0.95, color = "red") +
theme(legend.position = "none") + ylab("Coverage Prob") + xlab("m")
