haz[tdom<=high & tdom > low] <-0.05
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
baseline3 <- Simulate_baseline3()
ggplot(baseline3,aes(x = time, y = hazard)) + geom_line() + theme_classic(base_size = TEXT_SIZE)
ggsave(filename = "simple_base.png")
### Coxph B-Spline regression ###
library(tidyverse)
library(aghq)
library(mgcv)
library(Matrix)
library(rstan)
library(TMB)
library(INLA)
library(tmbstan)
library(foreach)
library(doMC)
library(parallel)
library(foreach)
library(abcoxph)
library(mvQuad)
precompile()
TEXT_SIZE = 25
ncores = 4
registerDoMC(ncores)
## Simulating function:
### Simulation Example
Simulate_baseline <- function(timelim = 300, breaks = 0.001, cut = 40){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-(0.05) *(c-min(c))
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
Simulate_data_extreme <- function(N = 1000, truth, RW2BINS = 50, baseline){
tdom <- baseline$time
timelim <- baseline$timelim[1]
haz <- baseline$hazard
if(truth == "smooth"){
u <- runif(N)
x <- runif(N,min = 0, max = 6)
truefunc <- function(x) log((x + 1)^2) - 1
eta <- truefunc(x)
}
else{
u <- runif(N)
x <- runif(N,min = -6, max = 6)
truefunc <- function(x) 1.5*(sin(0.8*x))
eta <- truefunc(x)
}
failtimes <- c()
for (i in 1:N) {
hazz <- haz * exp(eta[i])
cumhaz <- cumsum(hazz*0.001)
Surv <- exp(-cumhaz)
failtimes[i] <- tdom[colSums(outer(Surv, u[i], `>`))]
}
data <- data_frame(x = x,times = failtimes, entry = rep(0,length(length(u))),censoring = ifelse(failtimes >= timelim,yes = 0, no=1))
for (i in 1:length(data$censoring)) {
if (data$censoring[i] == 1) {data$censoring[i] <- rbinom(n = 1,size = 1,prob = 0.9)}
}
data <- rename(data,exposure = x)
data <- data %>% as_tibble() %>%
mutate(exposure_binned = abcoxph:::bin_covariate(exposure,bins = RW2BINS,type = "equal"))
data
}
construct_design <- function(x,splineknots,p,m) {
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
B <- BB$X
B <- as(B,"dgTMatrix")
B
}
construct_penalty <- function(x,splineknots,p,m, noise = 0.0001) {
BD <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,m),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
# BD$S[[1]] + BB$S[[1]] # O'sullivan spline "of the third kind"
BD$S[[1]] + diag(noise, ncol = ncol(BD$S[[1]]), nrow = nrow(BD$S[[1]])) #### add a very small noise to make the penalty matrix full rank
}
M <- 300
## simulate data:
set.seed(1234)
baseline <- Simulate_baseline()
ggplot(baseline,aes(x = time, y = hazard)) + geom_line() + theme(text = element_text(size = TEXT_SIZE))
ggsave(filename = "base1.png")
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(2, 0.5)))
dyn.load(dynlib("06_coxph_bspline"))
truth = "complicated", N = 1000
truth = "complicated"
N = 1000
data <- Simulate_data_extreme(baseline = baseline, truth = truth, N = N)
data <- abcoxph:::arrange_data(data)
dat <- tibble(x = data$exposure, t = data$times, cens = data$censoring)
dat$ranks <- rank(dat$t, ties.method = "min")
## setup smoothing part:
a <- min(dat$x)
b <- max(dat$x) # boundary
n <- nrow(dat)
# Order of spline
p <- 4 # 4 = cubic
# Order of derivative penalty
m <- 2
# Number of INTERIOR knots
d <- 46
# Number of knots
T <- d + p
# The knots
intknots <- seq(a,b,length.out = d)
leftknots <- seq(min(intknots)-(p-1),min(intknots)-1,by=1)
rightknots <- seq(max(intknots)+1,max(intknots)+p-1,by=1)
splineknots <- sort(unique(c(leftknots,intknots,rightknots)))
P <- as(construct_penalty(dat$x,splineknots,p,m,noise = 0.0001),'dgTMatrix')
B <- as(construct_design(dat$x,splineknots,p,m),'dgTMatrix')
D <- abcoxph:::create_diff_matrix(n)
### Setup TMB:
tmbdat <- list(
# Design matrix
BX = B,
# Penalty matrix
P = P,
# Differencing matrix
D = D,
# Log determinant of penalty matrix (without the sigma part)
logPdet = as.numeric(determinant(P,logarithm = TRUE)$modulus),
# Response
ranks = as.integer(dat$ranks),
cens = as.integer(dat$cens),
# Prior params
u = 2,
alpha = 0.5
)
tmbparams <- list(
W = rep(0,ncol(B)), # W = c(U); U = B-Spline coefficients
theta = 0 # -2log(sigma)
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "06_coxph_bspline",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,7,0)
logpostsigma <- compute_pdf_and_cdf(quad$marginals[[1]],list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)), interpolation = "spline")
with(logpostsigma,plot(transparam,pdf_transparam,type='l'))
precompile()
TEXT_SIZE = 25
### Setup_data:
set.seed(1234)
data <- Leuk %>% select(c("time","cens","age","sex","wbc","tpi"))
names(data)[1] <- "times"
data <- abcoxph:::arrange_data(data)
data$ranks <- rank(data$times, ties.method = "min")
hist(data$times,breaks = 100)
## setup smoothing part:
a <- min(data$tpi)
b <- max(data$tpi) # boundary
n <- nrow(data)
# Order of spline
p <- 4 # 4 = cubic
# Order of derivative penalty
m <- 2
# Number of INTERIOR knots
d <- 46
# Number of knots
T <- d + p
# The knots
intknots <- seq(a,b,length.out = d)
leftknots <- seq(min(intknots)-(p-1),min(intknots)-1,by=1)
rightknots <- seq(max(intknots)+1,max(intknots)+p-1,by=1)
splineknots <- sort(unique(c(leftknots,intknots,rightknots)))
construct_design <- function(x,splineknots,p,m) {
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
B <- BB$X
B <- as(B,"dgTMatrix")
B
}
construct_penalty <- function(x,splineknots,p,m, noise = 0.0001) {
BD <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,m),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
# BD$S[[1]] + BB$S[[1]] # O'sullivan spline "of the third kind"
BD$S[[1]] + diag(noise, ncol = ncol(BD$S[[1]]), nrow = nrow(BD$S[[1]])) #### add a very small noise to make the penalty matrix full rank
}
P <- as(construct_penalty(data$tpi,splineknots,p,m, noise = 0.0001),'dgTMatrix')
B <- as(construct_design(data$tpi,splineknots,p,m),'dgTMatrix')
D <- abcoxph:::create_diff_matrix(n)
X <- as.matrix(data[,3:5])
BX <- as(cbind(B,X),'dgTMatrix')
### Setup TMB:
tmbdat <- list(
# Design matrix
BX = BX,
# Penalty matrix
P = P,
# Differencing matrix
D = D,
# Log determinant of penalty matrix (without the sigma part)
logPdet = as.numeric(determinant(P,logarithm = TRUE)$modulus),
# logPdet = sum(log(eigen(P,only.values = T)$values[1:(length(eigen(P,only.values = T)$values)-m)])),
# Response
ranks = as.integer(data$ranks),
cens = as.integer(data$cens),
# Prior params
u = 2,
alpha = 0.5
)
tmbparams <- list(
W = rep(0,ncol(BX)), # W = c(U); U = B-Spline coefficients
theta = 0 # -2log(sigma)
)
start_time <- Sys.time()
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "02_coxph_leuk",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,15,0)
# Plot of theta posterior
logpostsigma <- compute_pdf_and_cdf(quad$marginals[[1]],list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)), interpolation = "spline")
with(logpostsigma,plot(transparam,pdf_transparam,type='l'))
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "06_coxph_bspline",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,15,0)
# Plot of theta posterior
logpostsigma <- compute_pdf_and_cdf(quad$marginals[[1]],list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)), interpolation = "spline")
with(logpostsigma,plot(transparam,pdf_transparam,type='l'))
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,7,0)
# Plot of theta posterior
logpostsigma <- compute_pdf_and_cdf(quad$marginals[[1]],list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)), interpolation = "spline")
with(logpostsigma,plot(transparam,pdf_transparam,type='l'))
getwd()
### load packages:
library(tidyverse)
TEXT_SIZE = 25
### load results:
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
### First plot: when true function is simple:
simple_result <- result3 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
simple_result$method[simple_result$method == "AGHQ"] <- "Proposed"
simple_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Second plot: when true function is stepwise:
stepwise_result <- result2 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
stepwise_result$method[stepwise_result$method == "AGHQ"] <- "Proposed"
stepwise_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Third plot: when true function is stepwise:
com_result <- result %>% filter(method != "MGCV") %>% select(method,coverage,mse)
com_result$method[com_result$method == "AGHQ"] <- "Proposed"
com_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
getwd()
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
### First plot: when true function is simple:
simple_result <- result3 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
simple_result$method[simple_result$method == "AGHQ"] <- "Proposed"
simple_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Second plot: when true function is stepwise:
stepwise_result <- result2 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
stepwise_result$method[stepwise_result$method == "AGHQ"] <- "Proposed"
stepwise_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Third plot: when true function is stepwise:
com_result <- result %>% filter(method != "MGCV") %>% select(method,coverage,mse)
com_result$method[com_result$method == "AGHQ"] <- "Proposed"
com_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Coxph B-Spline regression ###
library(tidyverse)
library(aghq)
library(mgcv)
library(Matrix)
library(rstan)
library(TMB)
library(INLA)
library(tmbstan)
library(foreach)
library(doMC)
library(parallel)
library(foreach)
library(abcoxph)
library(mvQuad)
## Simulating function:
### Simulation Example
Simulate_baseline <- function(timelim = 300, breaks = 0.001, cut = 40){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-(0.05) *(c-min(c))
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
Simulate_data_extreme <- function(N = 1000, truth, RW2BINS = 50, baseline){
tdom <- baseline$time
timelim <- baseline$timelim[1]
haz <- baseline$hazard
if(truth == "smooth"){
u <- runif(N)
x <- runif(N,min = 0, max = 6)
truefunc <- function(x) log((x + 1)^2) - 1
eta <- truefunc(x)
}
else{
u <- runif(N)
x <- runif(N,min = -6, max = 6)
truefunc <- function(x) 1.5*(sin(0.8*x))
eta <- truefunc(x)
}
failtimes <- c()
for (i in 1:N) {
hazz <- haz * exp(eta[i])
cumhaz <- cumsum(hazz*0.001)
Surv <- exp(-cumhaz)
failtimes[i] <- tdom[colSums(outer(Surv, u[i], `>`))]
}
data <- data_frame(x = x,times = failtimes, entry = rep(0,length(length(u))),censoring = ifelse(failtimes >= timelim,yes = 0, no=1))
for (i in 1:length(data$censoring)) {
if (data$censoring[i] == 1) {data$censoring[i] <- rbinom(n = 1,size = 1,prob = 0.9)}
}
data <- rename(data,exposure = x)
data <- data %>% as_tibble() %>%
mutate(exposure_binned = abcoxph:::bin_covariate(exposure,bins = RW2BINS,type = "equal"))
data
}
construct_design <- function(x,splineknots,p,m) {
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
B <- BB$X
B <- as(B,"dgTMatrix")
B
}
construct_penalty <- function(x,splineknots,p,m, noise = 0.0001) {
BD <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,m),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
# BD$S[[1]] + BB$S[[1]] # O'sullivan spline "of the third kind"
BD$S[[1]] + diag(noise, ncol = ncol(BD$S[[1]]), nrow = nrow(BD$S[[1]])) #### add a very small noise to make the penalty matrix full rank
}
M <- 300
## simulate data:
set.seed(1234)
baseline <- Simulate_baseline()
ggplot(baseline,aes(x = time, y = hazard)) + geom_line() + theme_classic(base_size = TEXT_SIZE)
TEXT_SIZE = 25
## simulate data:
set.seed(1234)
baseline <- Simulate_baseline()
ggplot(baseline,aes(x = time, y = hazard)) + geom_line() + theme_classic(base_size = TEXT_SIZE)
## simulate data:
set.seed(1234)
baseline <- Simulate_baseline()
ggplot(baseline,aes(x = time, y = hazard)) + geom_line() + theme_classic(base_size = TEXT_SIZE)
ggsave(filename = "com_base.png")
set.seed(1234)
Simulate_baseline3 <- function(timelim = 300, breaks = 0.001, cut = 5){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-0.01
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
baseline3 <- Simulate_baseline3()
ggplot(baseline3,aes(x = time, y = hazard)) + geom_line() + theme_classic(base_size = TEXT_SIZE)
ggsave(filename = "simple_base.png")
set.seed(1234)
Simulate_baseline2 <- function(timelim = 300, breaks = 0.001, cut = 30){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-0.05
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
baseline2 <- Simulate_baseline2()
ggplot(baseline2,aes(x = time, y = hazard)) + geom_line() + theme_classic(base_size = TEXT_SIZE)
ggsave(filename = "stepwise_base.png")
getwd()
### load packages:
library(tidyverse)
TEXT_SIZE = 25
### load results:
# load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
# load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
# load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
### First plot: when true function is simple:
simple_result <- result3 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
simple_result$method[simple_result$method == "AGHQ"] <- "Proposed"
simple_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Second plot: when true function is stepwise:
stepwise_result <- result2 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
stepwise_result$method[stepwise_result$method == "AGHQ"] <- "Proposed"
stepwise_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Third plot: when true function is stepwise:
com_result <- result %>% filter(method != "MGCV") %>% select(method,coverage,mse)
com_result$method[com_result$method == "AGHQ"] <- "Proposed"
com_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
