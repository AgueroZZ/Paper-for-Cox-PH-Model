# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,15,0)
# Plot of theta posterior
logpostsigma <- compute_pdf_and_cdf(quad$marginals[[1]],list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)), interpolation = "spline")
with(logpostsigma,plot(transparam,pdf_transparam,type='l'))
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,7,0)
# Plot of theta posterior
logpostsigma <- compute_pdf_and_cdf(quad$marginals[[1]],list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)), interpolation = "spline")
with(logpostsigma,plot(transparam,pdf_transparam,type='l'))
getwd()
### load packages:
library(tidyverse)
TEXT_SIZE = 25
### load results:
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
### First plot: when true function is simple:
simple_result <- result3 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
simple_result$method[simple_result$method == "AGHQ"] <- "Proposed"
simple_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Second plot: when true function is stepwise:
stepwise_result <- result2 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
stepwise_result$method[stepwise_result$method == "AGHQ"] <- "Proposed"
stepwise_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Third plot: when true function is stepwise:
com_result <- result %>% filter(method != "MGCV") %>% select(method,coverage,mse)
com_result$method[com_result$method == "AGHQ"] <- "Proposed"
com_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
getwd()
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
### First plot: when true function is simple:
simple_result <- result3 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
simple_result$method[simple_result$method == "AGHQ"] <- "Proposed"
simple_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Second plot: when true function is stepwise:
stepwise_result <- result2 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
stepwise_result$method[stepwise_result$method == "AGHQ"] <- "Proposed"
stepwise_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Third plot: when true function is stepwise:
com_result <- result %>% filter(method != "MGCV") %>% select(method,coverage,mse)
com_result$method[com_result$method == "AGHQ"] <- "Proposed"
com_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Coxph B-Spline regression ###
library(tidyverse)
library(aghq)
library(mgcv)
library(Matrix)
library(rstan)
library(TMB)
library(INLA)
library(tmbstan)
library(foreach)
library(doMC)
library(parallel)
library(foreach)
library(abcoxph)
library(mvQuad)
## Simulating function:
### Simulation Example
Simulate_baseline <- function(timelim = 300, breaks = 0.001, cut = 40){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-(0.05) *(c-min(c))
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
Simulate_data_extreme <- function(N = 1000, truth, RW2BINS = 50, baseline){
tdom <- baseline$time
timelim <- baseline$timelim[1]
haz <- baseline$hazard
if(truth == "smooth"){
u <- runif(N)
x <- runif(N,min = 0, max = 6)
truefunc <- function(x) log((x + 1)^2) - 1
eta <- truefunc(x)
}
else{
u <- runif(N)
x <- runif(N,min = -6, max = 6)
truefunc <- function(x) 1.5*(sin(0.8*x))
eta <- truefunc(x)
}
failtimes <- c()
for (i in 1:N) {
hazz <- haz * exp(eta[i])
cumhaz <- cumsum(hazz*0.001)
Surv <- exp(-cumhaz)
failtimes[i] <- tdom[colSums(outer(Surv, u[i], `>`))]
}
data <- data_frame(x = x,times = failtimes, entry = rep(0,length(length(u))),censoring = ifelse(failtimes >= timelim,yes = 0, no=1))
for (i in 1:length(data$censoring)) {
if (data$censoring[i] == 1) {data$censoring[i] <- rbinom(n = 1,size = 1,prob = 0.9)}
}
data <- rename(data,exposure = x)
data <- data %>% as_tibble() %>%
mutate(exposure_binned = abcoxph:::bin_covariate(exposure,bins = RW2BINS,type = "equal"))
data
}
construct_design <- function(x,splineknots,p,m) {
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
B <- BB$X
B <- as(B,"dgTMatrix")
B
}
construct_penalty <- function(x,splineknots,p,m, noise = 0.0001) {
BD <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,m),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
# BD$S[[1]] + BB$S[[1]] # O'sullivan spline "of the third kind"
BD$S[[1]] + diag(noise, ncol = ncol(BD$S[[1]]), nrow = nrow(BD$S[[1]])) #### add a very small noise to make the penalty matrix full rank
}
M <- 300
## simulate data:
set.seed(1234)
baseline <- Simulate_baseline()
ggplot(baseline,aes(x = time, y = hazard)) + geom_line() + theme_classic(base_size = TEXT_SIZE)
TEXT_SIZE = 25
## simulate data:
set.seed(1234)
baseline <- Simulate_baseline()
ggplot(baseline,aes(x = time, y = hazard)) + geom_line() + theme_classic(base_size = TEXT_SIZE)
## simulate data:
set.seed(1234)
baseline <- Simulate_baseline()
ggplot(baseline,aes(x = time, y = hazard)) + geom_line() + theme_classic(base_size = TEXT_SIZE)
ggsave(filename = "com_base.png")
set.seed(1234)
Simulate_baseline3 <- function(timelim = 300, breaks = 0.001, cut = 5){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-0.01
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
baseline3 <- Simulate_baseline3()
ggplot(baseline3,aes(x = time, y = hazard)) + geom_line() + theme_classic(base_size = TEXT_SIZE)
ggsave(filename = "simple_base.png")
set.seed(1234)
Simulate_baseline2 <- function(timelim = 300, breaks = 0.001, cut = 30){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-0.05
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
baseline2 <- Simulate_baseline2()
ggplot(baseline2,aes(x = time, y = hazard)) + geom_line() + theme_classic(base_size = TEXT_SIZE)
ggsave(filename = "stepwise_base.png")
getwd()
### load packages:
library(tidyverse)
TEXT_SIZE = 25
### load results:
# load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
# load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
# load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
### First plot: when true function is simple:
simple_result <- result3 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
simple_result$method[simple_result$method == "AGHQ"] <- "Proposed"
simple_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Second plot: when true function is stepwise:
stepwise_result <- result2 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
stepwise_result$method[stepwise_result$method == "AGHQ"] <- "Proposed"
stepwise_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
### Third plot: when true function is stepwise:
com_result <- result %>% filter(method != "MGCV") %>% select(method,coverage,mse)
com_result$method[com_result$method == "AGHQ"] <- "Proposed"
com_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/aggresult_300_aggregations_complicated.rda")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/aggresult_300_aggregations_simple.rda")
View(agg_result)
View(agg_result2)
View(agg_result3)
### load packages:
library(tidyverse)
TEXT_SIZE = 25
### load results:
# load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
# load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
# load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
getwd()
### load packages:
library(tidyverse)
TEXT_SIZE = 25
### load results:
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
# load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
# load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
# load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
### First plot: when true function is simple:
simple_result <- result3 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
simple_result$method[simple_result$method == "AGHQ"] <- "Proposed"
simple_result
simple_result %>% mutate(base = "simple")
com_result <- com_result %>% mutate(base = "complicated")
### Third plot: when true function is stepwise:
com_result <- result %>% filter(method != "MGCV") %>% select(method,coverage,mse)
com_result$method[com_result$method == "AGHQ"] <- "Proposed"
com_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
com_result <- com_result %>% mutate(base = "complicated")
com_result
result <- rbind(simple_result, stepwise_result, com_result)
result <- rbind(simple_result, stepwise_result, com_result)
### First plot: when true function is simple:
simple_result <- result3 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
simple_result$method[simple_result$method == "AGHQ"] <- "Proposed"
simple_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
simple_result <- simple_result %>% mutate(base = "simple")
### Second plot: when true function is stepwise:
stepwise_result <- result2 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
stepwise_result$method[stepwise_result$method == "AGHQ"] <- "Proposed"
stepwise_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
stepwise_result <- stepwise_result %>% mutate(base = "oscillating")
### Third plot: when true function is stepwise:
com_result <- result %>% filter(method != "MGCV") %>% select(method,coverage,mse)
com_result$method[com_result$method == "AGHQ"] <- "Proposed"
com_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
com_result <- com_result %>% mutate(base = "complicated")
result <- rbind(simple_result, stepwise_result, com_result)
result
result
result %>% ggplot(aes(x = base, y = mse, group = method)) + geom_boxplot()
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot()
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE, legend.position = c(0.8, 0.2))
?theme_classic
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot() + theme(legend.position = c(0.8, 0.2)) + theme_classic(base_size = TEXT_SIZE)
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot() + theme(legend.position = c(0.2, 0.8)) + theme_classic(base_size = TEXT_SIZE)
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot()  + theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.2))
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot()  + theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.2, 0.8))
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot()  + theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.4, 0.8))
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot()  + theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.8))
result
result %>% group_by(base) %>% summarise(coverage = mean(coverage))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_bar()
#### barchart for coverage prob
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col()
#### barchart for coverage prob
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col(position = "dodge")
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col(position = "dodge") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.8))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_dotplot() +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.8))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_dotplot() +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.8))
?geom_dotplot
geom
geom_point
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_point() +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.8))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, color = method)) + geom_point() +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.8))
geom_point
?geom_point
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, color = method)) + geom_point(size = 10) +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.8))
#### Side by side boxplot
result <- rbind(simple_result, stepwise_result, com_result)
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot()  + theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.8))
#### barchart for coverage prob
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, color = method)) + geom_point(size = 10) +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.8))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, color = method)) + geom_point(size = 10) +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.4))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, color = method)) + geom_col(position = "dodge") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.4))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col(position = "dodge") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.4))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col(position = "dodge") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.4))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col(position = "dodge") +
+ geom_vline(x = 0.95, color = "red") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.4))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col(position = "dodge") +
+ geom_vline(xintercept = 0.95, color = "red") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.4))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_vline(xintercept = 0.95, color = "red") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.4))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = "red") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = c(0.8, 0.4))
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = "red") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = "none")
#### Side by side boxplot
result <- rbind(simple_result, stepwise_result, com_result)
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot()  + theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = "none")
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = "red") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = "none")
### load packages:
library(tidyverse)
TEXT_SIZE = 25
### load results:
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
load("/Users/ziangzhang/Documents/GitHub/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
# load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_complicated.rda")
# load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_stepwise.rda")
# load("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_codes/simulation_smoothing/v6/result_300_aggregations_simple.rda")
### First plot: when true function is simple:
simple_result <- result3 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
simple_result$method[simple_result$method == "AGHQ"] <- "Proposed"
simple_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
simple_result <- simple_result %>% mutate(base = "simple")
### Second plot: when true function is stepwise:
stepwise_result <- result2 %>% filter(method != "MGCV") %>% select(method,coverage,mse)
stepwise_result$method[stepwise_result$method == "AGHQ"] <- "Proposed"
stepwise_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
stepwise_result <- stepwise_result %>% mutate(base = "oscillating")
### Third plot: when true function is stepwise:
com_result <- result %>% filter(method != "MGCV") %>% select(method,coverage,mse)
com_result$method[com_result$method == "AGHQ"] <- "Proposed"
com_result %>% ggplot(aes(x = method, y = mse)) + geom_boxplot() + theme_classic(base_size = TEXT_SIZE)
com_result <- com_result %>% mutate(base = "complicated")
#### Side by side boxplot
result <- rbind(simple_result, stepwise_result, com_result)
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot()  + theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = "none")
#### barchart for coverage prob
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = "red") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = "none")
#### Side by side boxplot
result <- rbind(simple_result, stepwise_result, com_result)
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot()  +
xlab("") + ylab("MSE") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = "none")
#### barchart for coverage prob
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = "red") +
xlab("") + ylab("Coverage Prob") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = "none")
#### Side by side boxplot
result <- rbind(simple_result, stepwise_result, com_result)
result %>% ggplot(aes(x = base, y = mse, fill = method)) + geom_boxplot()  +
xlab("") + ylab("MSE") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = "none")
#### barchart for coverage prob
result %>% group_by(base, method) %>% summarise(coverage = mean(coverage)) %>%
ggplot(aes(x = base, y = coverage, fill = method)) + geom_col(position = "dodge") +
geom_hline(yintercept = 0.95, color = "red") +
xlab("") + ylab("Coverage Prob") +
theme_classic(base_size = TEXT_SIZE) +  theme(legend.position = "none")
# ### CoxPH regression for the kidney example ###
# lib_loc <- '/home/ziang/lib'
# library(tidyverse, lib = lib_loc)
# library(aghq, lib = lib_loc)
# library(mgcv)
# library(Matrix)
# library(rstan, lib = lib_loc)
# library(TMB, lib = lib_loc)
# library(INLA, lib = lib_loc)
# library(tmbstan, lib = lib_loc)
# library(foreach, lib = lib_loc)
# library(doMC, lib = lib_loc)
# library(parallel)
# library(foreach)
# library(abcoxph, lib = lib_loc)
# library(mvQuad, lib = lib_loc)
# library(survival)
# library(brinla, lib = lib_loc)
### CoxPH regression for the kidney example ###
library(tidyverse)
library(aghq)
library(mgcv)
library(Matrix)
library(rstan)
library(TMB)
library(INLA)
library(tmbstan)
library(foreach)
library(doMC)
library(parallel)
library(foreach)
library(abcoxph)
library(mvQuad)
library(survival)
library(brinla)
precompile()
TEXT_SIZE = 25
## tidy up the data:
data <- survival::kidney
data <- data.frame(times = data$time, status = data$status, age = data$age,sex = data$sex,GN = ifelse(data$disease == "GN",1,0),AN = ifelse(data$disease == "AN",1,0),PKD = ifelse(data$disease == "PKD",1,0), id = data$id)
data <- abcoxph:::arrange_data(data)
data$ranks <- rank(data$times, ties.method = "min")
X <- as(as.matrix(data[,c(3:7)]),"dgTMatrix")
B <- as(abcoxph:::create_blist_element(u = data$id)$B,"dgTMatrix")
n <- nrow(data)
D <- as(abcoxph:::create_diff_matrix(n), "dgTMatrix") ### n = K * N
### Setup TMB:
tmbdat <- list(
# Design matrix (random and fixed)
B = as(B,"dgTMatrix"),
X = as(X,"dgTMatrix"),
# Differencing matrix
D = as(D,"dgTMatrix"),
# Response
ranks = as.integer(data$ranks),
cens = as.integer(data$status),
# Prior params
u = 2,
alpha = 0.5,
betaprec = 0.001)
tmbparams <- list(
W = rep(0,ncol(B)+ncol(X)),
theta = 0 # -2log(sigma)
)
compile("01_coxph_kidney.cpp")
getwd()
