runtime_aghq <- end_time - start_time
# Plot of curve
# Posterior mean
W <- apply(samps$samps,1,mean)
U <- W[1:ncol(P)]
beta <- W[(ncol(P)+1):ncol(BX)]
# Construct a plot
plotx <- seq(a,b,by=0.01)
plotdat <- data.frame(x = plotx)
plotB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = plotdat,knots = list(x = splineknots))$X
# Construct the plot
ploteta <- plotB %*% U
ploteta <- ploteta - mean(ploteta)
plot(plotx,ploteta,type='l',ylim=c(-0.5,0.5))
# Plot the samples
samplestoplot <- samps$samps[ ,sample(1:ncol(samps$samps),200,replace = FALSE)]
for (i in 1:ncol(samplestoplot)) {
WS <- samplestoplot[ ,i]
US <- WS[1:ncol(P)]
plotetaS <- plotB %*% US
plotetaS <- plotetaS - mean(plotetaS)
lines(plotx,plotetaS,col = 'lightgray')
}
lines(plotx,ploteta)
# get pointwise SD of eta
etaplot <- list()
for (i in 1:ncol(samps$samps)) {
W <- samps$samps[ ,i]
U <- W[1:ncol(P)]
eta <- as.numeric(plotB %*% U)
etaplot[[i]] <- data.frame(
x = plotx,
eta = eta - mean(eta)
)
}
etaplotframe <- purrr::reduce(etaplot,rbind) %>%
group_by(x) %>%
summarize(etamean = mean(eta),etasd = sd(eta)) %>%
mutate(lower = etamean - 2*etasd,upper = etamean + 2*etasd)
with(etaplotframe,plot(x,etamean,type='l',ylim = c(-0.5,0.5)))
with(etaplotframe,lines(x,lower,type='l',lty='dashed'))
with(etaplotframe,lines(x,upper,type='l',lty='dashed'))
# Check mgcv
mgcv_knots <- data.frame(x = splineknots)
mgcvmod_bs <- mgcv::gam(
times ~ age + sex + wbc + s(tpi,bs='bs',m=c(p-1,m),k=length(splineknots)-p),
data = data,
family = cox.ph(),
knots = mgcv_knots,
weights = cens
)
mgcv_bs_pred <- predict(mgcvmod_bs,newdata = data.frame(tpi = plotx, age = rep(0, length(plotx)), sex = rep(0, length(plotx)), wbc = rep(0, length(plotx))),se.fit = TRUE)
mgcv_bs_pred$fit <- mgcv_bs_pred$fit - mean(mgcv_bs_pred$fit)
plot(plotx,mgcv_bs_pred$fit,type = 'l',ylim = c(-0.5,0.5))
lines(plotx,(mgcv_bs_pred$fit - 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
lines(plotx,(mgcv_bs_pred$fit + 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
### INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
data$tpi_binned <- abcoxph:::bin_covariate(data$tpi,bins = 50, type = "equal")
formula <- inla.surv(times,cens) ~ age + sex + wbc + f(tpi_binned,model = 'rw2',constr = T, hyper = prior.prec)
Inlaresult <- inla(formula = formula,data = data, family = "coxph")
fhat <- Inlaresult$summary.random$tpi_binned$mean
fup <- Inlaresult$summary.random$tpi_binned$`0.975quant`
flo <- Inlaresult$summary.random$tpi_binned$`0.025quant`
plotINLA <- data.frame(x = Inlaresult$summary.random$tpi_binned$ID, f = fhat, up = fup, lo = flo)
plot(plotINLA$x,plotINLA$f,type = 'l',ylim = c(-0.5,0.5))
lines(plotINLA$x,plotINLA$up,type='l',lty='dashed')
lines(plotINLA$x,plotINLA$lo,type='l',lty='dashed')
### INLA's inferred baseline
INLA_base <- bri.basehaz.plot(Inlaresult, plot = F)
INLA_base$basehaz <- exp(INLA_base$basehaz)
INLA_base <- data.frame(INLA_base)
ggplot(INLA_base, aes(time,basehaz)) + geom_line()
##### overall comparison:
overall <- tibble(tpi = c(etaplotframe$x, plotINLA$x, plotx), y = c(etaplotframe$etamean,plotINLA$f,mgcv_bs_pred$fit),
type = c(rep("Proposed",times = length(etaplotframe$x)), rep("INLA", times = length(plotINLA$x)), rep("mgcv",times = length(plotx)))  )
overall %>% filter(type != "mgcv") %>% mutate(y = exp(y)) %>% ggplot(aes(tpi,y)) + geom_line(aes(linetype = type)) + theme_classic(base_size = TEXT_SIZE)
##### overall comparison:
overall <- tibble(tpi = c(etaplotframe$x, plotINLA$x, plotx), y = c(etaplotframe$etamean,plotINLA$f,mgcv_bs_pred$fit),
type = c(rep("Proposed",times = length(etaplotframe$x)), rep("INLA", times = length(plotINLA$x)), rep("mgcv",times = length(plotx)))  )
overall %>% filter(type != "mgcv") %>% mutate(y = exp(y)) %>% ggplot(aes(tpi,y)) + geom_line(aes(linetype = type)) + theme_classic(base_size = TEXT_SIZE)
ggsave(filename = "leukSmooth.png")
### STAN:
start_time <- Sys.time()
stanmod <- tmbstan(
ff,
chains = 4,
cores = 4,
iter = 2000,
warmup = 1000,
init = quad$optresults$mode,
seed = 123
)
end_time <- Sys.time()
runtime_MCMC <- end_time - start_time
Inlaresult
inla_hyper <- brinla::bri.hyperpar.plot(Inlaresult, together = F)
### hyper-parameter:
inla_hyper <- brinla::bri.hyperpar.plot(Inlaresult, together = F)
inla_hyper <- inla_hyper %>% filter(parameter == "SD for tpi_binned") %>% select(1:2) %>% mutate(method = "INLA")
aghq_hyper <- logpostsigma %>% select(c("transparam","pdf_transparam")) %>% mutate(method = "Proposed")
names(aghq_hyper)[1:2] <- c("x","y")
hyper <- rbind(inla_hyper,aghq_hyper)
hyper %>% ggplot(aes(x,y,type = method)) + geom_line() + xlim(c(0,2)) + xlab("SD") + ylab("density") + theme_classic(base_size = TEXT_SIZE)
hyper %>% ggplot(aes(x,y)) + geom_line(aes(linetype = method)) + xlim(c(0,2)) + xlab("SD") + ylab("density") + theme_classic(base_size = TEXT_SIZE)
### hyper-parameter:
inla_hyper <- brinla::bri.hyperpar.plot(Inlaresult, together = F)
inla_hyper <- inla_hyper %>% filter(parameter == "SD for tpi_binned") %>% select(1:2) %>% mutate(method = "INLA")
aghq_hyper <- logpostsigma %>% select(c("transparam","pdf_transparam")) %>% mutate(method = "Proposed")
names(aghq_hyper)[1:2] <- c("x","y")
hyper <- rbind(inla_hyper,aghq_hyper)
hyper %>% ggplot(aes(x,y)) + geom_line(aes(linetype = method)) + xlim(c(0,1)) + xlab("SD") + ylab("density") + theme_classic(base_size = TEXT_SIZE)
### hyper-parameter:
inla_hyper <- brinla::bri.hyperpar.plot(Inlaresult, together = F)
inla_hyper <- inla_hyper %>% filter(parameter == "SD for tpi_binned") %>% select(1:2) %>% mutate(method = "INLA")
aghq_hyper <- logpostsigma %>% select(c("transparam","pdf_transparam")) %>% mutate(method = "Proposed")
names(aghq_hyper)[1:2] <- c("x","y")
hyper <- rbind(inla_hyper,aghq_hyper)
hyper %>% ggplot(aes(x,y)) + geom_line(aes(linetype = method)) + xlim(c(0,0.5)) + xlab("SD") + ylab("density") + theme_classic(base_size = TEXT_SIZE)
theta_logprior <- function(theta, prior_alpha = tmbdat$alpha,
prior_u = tmbdat$u) {
lambda <- -log(prior_alpha)/prior_u
log(lambda/2) - lambda * exp(-theta/2) - theta/2
}
priorfuncsigma <- function(x) (2/x) * exp(theta_logprior(-2 * log(x)))
prior <- tibble(x = hyper$x, y = priorfuncsigma(hyper$x), method = "Prior")
hyper <- rbind(prior,hyper)
hyper %>% ggplot(aes(x,y)) +  geom_line(aes(linetype = method)) + xlim(c(0,2)) + xlab("SD") + ylab("density") + theme_classic(base_size = TEXT_SIZE)
theta_logprior <- function(theta, prior_alpha = tmbdat$alpha,
prior_u = tmbdat$u) {
lambda <- -log(prior_alpha)/prior_u
log(lambda/2) - lambda * exp(-theta/2) - theta/2
}
priorfuncsigma <- function(x) (2/x) * exp(theta_logprior(-2 * log(x)))
prior <- tibble(x = hyper$x, y = priorfuncsigma(hyper$x), method = "Prior")
hyper <- rbind(prior,hyper)
hyper %>% ggplot(aes(x,y)) +  geom_line(aes(linetype = method)) + xlim(c(0,0.5)) + xlab("SD") + ylab("density") + theme_classic(base_size = TEXT_SIZE)
ggsave(filename = "leukHyper.png")
hyper %>% ggplot(aes(x,y)) +  geom_line(aes(linetype = method)) + xlim(c(0,0.5)) +
xlab("SD") + ylab("density") +
scale_linetype_manual(values=c("solid", "dotted","dashed")) +
theme_classic(base_size = TEXT_SIZE)
ggsave(filename = "leukHyper.png")
?aghq::marginal_laplace_tmb
library(geostatsp)
library(sp)
library(raster)
install.packages("geostatsp")
library(geostatsp)
library(sp)
library(raster)
library(tidyverse)
library(aghq)
library(mgcv)
library(Matrix)
library(TMB)
library(INLA)
library(tmbstan)
library(brinla)
library(geostatsp)
library(sp)
library(raster)
Leuk
### Setup_data:
set.seed(1234)
data <- Leuk %>% select(c("time","cens","age","sex","wbc","tpi"))
names(data)[1] <- "times"
data <- abcoxph:::arrange_data(data)
data$ranks <- rank(data$times, ties.method = "min")
hist(data$times,breaks = 100)
PROJTOUSE <- mapmisc::omerc(c(-3.055,53.365),angle=0)
crstouse <- CRS("+init=epsg:27700")
require("mapmisc")
install.packages("mapmisc")
library(mapmisc)
PROJTOUSE <- mapmisc::omerc(c(-3.055,53.365),angle=0)
crstouse <- CRS("+init=epsg:27700")
crstouse
PROJTOUSE
pointsdata <- SpatialPointsDataFrame(
coords = 90*1000*dplyr::select(dataformodelling,xcoord,ycoord),
data = dplyr::select(dataformodelling,-xcoord,-ycoord),
proj4string = PROJTOUSE
)
data <- Leuk %>% select(c("time","cens","age","sex","wbc","tpi","xcoord","ycoord"))
data
names(data)[1] <- "times"
data <- abcoxph:::arrange_data(data)
data$ranks <- rank(data$times, ties.method = "min")
hist(data$times,breaks = 100)
pointsdata <- SpatialPointsDataFrame(
coords = 90*1000*dplyr::select(data,xcoord,ycoord),
data = dplyr::select(data,-xcoord,-ycoord),
proj4string = PROJTOUSE
)
pointsdata <- spTransform(pointsdata,crstouse)
install.packages("rgdal")
pointsdata <- SpatialPointsDataFrame(
coords = 90*1000*dplyr::select(data,xcoord,ycoord),
data = dplyr::select(data,-xcoord,-ycoord),
proj4string = PROJTOUSE
)
pointsdata <- spTransform(pointsdata,crstouse)
install.packages("rgdal")
pointsdata <- SpatialPointsDataFrame(
coords = 90*1000*dplyr::select(data,xcoord,ycoord),
data = dplyr::select(data,-xcoord,-ycoord),
proj4string = PROJTOUSE
)
pointsdata <- spTransform(pointsdata,crstouse)
install.packages("rgdal")
pointsdata <- SpatialPointsDataFrame(
coords = 90*1000*dplyr::select(data,xcoord,ycoord),
data = dplyr::select(data,-xcoord,-ycoord),
proj4string = PROJTOUSE
)
pointsdata <- spTransform(pointsdata,crstouse)
PROJTOUSE <- mapmisc::omerc(c(-3.055,53.365),angle=0)
crstouse <- CRS("+init=epsg:27700")
pointsdata <- SpatialPointsDataFrame(
coords = 90*1000*dplyr::select(data,xcoord,ycoord),
data = dplyr::select(data,-xcoord,-ycoord),
proj4string = PROJTOUSE
)
pointsdata <- spTransform(pointsdata,crstouse)
### Coxph Leuk Example ###
library(tidyverse)
library(aghq)
library(mgcv)
library(Matrix)
library(TMB)
library(INLA)
library(tmbstan)
library(brinla)
library(geostatsp)
library(sp)
library(raster)
library(mapmisc)
precompile()
TEXT_SIZE = 25
### Setup_data:
set.seed(1234)
data <- Leuk %>% select(c("time","cens","age","sex","wbc","tpi","xcoord","ycoord"))
names(data)[1] <- "times"
data <- abcoxph:::arrange_data(data)
data$ranks <- rank(data$times, ties.method = "min")
hist(data$times,breaks = 100)
PROJTOUSE <- mapmisc::omerc(c(-3.055,53.365),angle=0)
crstouse <- CRS("+init=epsg:27700")
pointsdata <- SpatialPointsDataFrame(
coords = 90*1000*dplyr::select(data,xcoord,ycoord),
data = dplyr::select(data,-xcoord,-ycoord),
proj4string = PROJTOUSE
)
pointsdata <- spTransform(pointsdata,crstouse)
pointsdata
?spTransform
as.matrix(data[,3:5])
X <- sparse.model.matrix(time ~ age + sex + wbc,data = data)
sparse.model.matrix(time ~ age + sex + wbc,data = data)
data
?sparse.model.matrix
sparse.model.matrix(time ~ age + sex + wbc ,data = data)
X <- sparse.model.matrix(times ~ age + sex + wbc ,data = data)
X
X <- sparse.model.matrix(times ~ -1 + age + sex + wbc ,data = data)
X
X <- as(sparse.model.matrix(times ~ -1 + age + sex + wbc ,data = data),'dgTMatrix')
X
### setup the spatial term
Q_matrix <- function(theta) {
# theta = log(sigma), log(rho)
theta <- as.numeric(unname(theta))
# Matern
mm <- geostatsp::matern(
pointsdata,
param = c("variance" = exp(2 * theta[1]),"range" = exp(theta[2]),"shape" = 1),
type = "precision"
)
bb <- beta_prec * diag(p)
rbind(
cbind(mm,Matrix(0,nrow = nrow(mm),ncol = p,sparse = FALSE)),
cbind(Matrix(0,nrow = p,ncol = ncol(mm),sparse = FALSE),bb)
)
}
logsigmalogprior <- function(theta,sigma0,prior_alpha) {
# theta = log(sigma)
alpha2 <- prior_alpha
lambda2 <- -log(alpha2) / sigma0
log(lambda2) - exp(theta) * lambda2 + theta
}
logrhologprior <- function(theta,rho0,prior_alpha) {
# theta = log(rho)
d <- 2
alpha1 <- prior_alpha
lambda1 <- -log(alpha1) * rho0^(d/2)
log(d/2) + log(lambda1) - (d/2)*theta - lambda1 * exp(-theta * d/2)
}
logprior_theta <- function(theta) {
logsigmalogprior(theta[1],sigma0 = sigma_u,prior_alpha = sigma_alpha) +
logrhologprior(theta[2],rho0 = rho_u,prior_alpha = rho_alpha)
}
Q_matrix(theta)
Q_matrix(c(1,1))
sigma_u <- 1
sigma_alpha <- .5
rho_u <- 20 * 1000
rho_alpha <- .5
beta_prec <- .001
Q_matrix(c(1,1))
Q_matrix <- function(theta) {
# theta = log(sigma), log(rho)
theta <- as.numeric(unname(theta))
# Matern
mm <- geostatsp::matern(
pointsdata,
param = c("variance" = exp(2 * theta[1]),"range" = exp(theta[2]),"shape" = 1),
type = "precision"
)
as(mm,'dgTMatrix')
}
Q_matrix(c(1,1))
Q_matrix <- function(theta) {
# theta = log(sigma), log(rho)
theta <- as.numeric(unname(theta))
# Matern
mm <- geostatsp::matern(
pointsdata,
param = c("variance" = exp(2 * theta[1]),"range" = exp(theta[2]),"shape" = 1),
type = "precision"
)
mm
}
Q_matrix(c(1,1))
Q <- Q_matrix(c(1,1))
Q[1,1]
Q[2,2]
eigen(Q, only.values = T)
?matern
?geostatsp
matern
### Coxph Leuk Example ###
library(tidyverse)
library(aghq)
library(mgcv)
library(Matrix)
library(TMB)
library(INLA)
library(tmbstan)
library(brinla)
library(geostatsp)
library(sp)
library(raster)
library(mapmisc)
precompile()
TEXT_SIZE = 25
### sigma for Spatial effect
sigma_u <- 1
sigma_alpha <- .5
rho_u <- 20 * 1000
rho_alpha <- .5
### Sigma for RW2 effect
Sigma_u <- 2
Sigma_alpha <- 0.5
### For the fixed effect
beta_prec <- .001
### Setup_data:
set.seed(1234)
data <- Leuk %>% select(c("time","cens","age","sex","wbc","tpi","xcoord","ycoord"))
names(data)[1] <- "times"
data <- abcoxph:::arrange_data(data)
data$ranks <- rank(data$times, ties.method = "min")
PROJTOUSE <- mapmisc::omerc(c(-3.055,53.365),angle=0)
crstouse <- CRS("+init=epsg:27700")
pointsdata <- SpatialPointsDataFrame(
coords = 90*1000*dplyr::select(data,xcoord,ycoord),
data = dplyr::select(data,-xcoord,-ycoord),
proj4string = PROJTOUSE
)
pointsdata <- spTransform(pointsdata,crstouse)
## setup smoothing part:
a <- min(data$tpi)
b <- max(data$tpi) # boundary
n <- nrow(data)
# Order of spline
p <- 4 # 4 = cubic
# Order of derivative penalty
m <- 2
# Number of INTERIOR knots
d <- 46
# Number of knots
T <- d + p
# The knots
intknots <- seq(a,b,length.out = d)
leftknots <- seq(min(intknots)-(p-1),min(intknots)-1,by=1)
rightknots <- seq(max(intknots)+1,max(intknots)+p-1,by=1)
splineknots <- sort(unique(c(leftknots,intknots,rightknots)))
construct_design <- function(x,splineknots,p,m) {
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
B <- BB$X
B <- as(B,"dgTMatrix")
B
}
construct_penalty <- function(x,splineknots,p,m, noise = 0.0001) {
BD <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,m),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
# BD$S[[1]] + BB$S[[1]] # O'sullivan spline "of the third kind"
BD$S[[1]] + diag(noise, ncol = ncol(BD$S[[1]]), nrow = nrow(BD$S[[1]])) #### add a very small noise to make the penalty matrix full rank
}
# Setup the RW2 term:
P <- as(construct_penalty(data$tpi,splineknots,p,m, noise = 0.0001),'dgTMatrix')
B <- as(construct_design(data$tpi,splineknots,p,m),'dgTMatrix')
### setup the spatial term
Q_matrix <- function(theta) {
# theta = log(sigma), log(rho)
theta <- as.numeric(unname(theta))
# Matern
mm <- geostatsp::matern(
pointsdata,
param = c("variance" = exp(2 * theta[1]),"range" = exp(theta[2]),"shape" = 1),
type = "precision"
)
mm
}
logsigmalogprior <- function(theta,sigma0,prior_alpha) {
# theta = log(sigma)
alpha2 <- prior_alpha
lambda2 <- -log(alpha2) / sigma0
log(lambda2) - exp(theta) * lambda2 + theta
}
logrhologprior <- function(theta,rho0,prior_alpha) {
# theta = log(rho)
d <- 2
alpha1 <- prior_alpha
lambda1 <- -log(alpha1) * rho0^(d/2)
log(d/2) + log(lambda1) - (d/2)*theta - lambda1 * exp(-theta * d/2)
}
logprior_theta <- function(theta) {
logsigmalogprior(theta[1],sigma0 = sigma_u,prior_alpha = sigma_alpha) +
logrhologprior(theta[2],rho0 = rho_u,prior_alpha = rho_alpha)
}
# Setup the fixed effect term and the design matrix
D <- abcoxph:::create_diff_matrix(n)
X <- as(sparse.model.matrix(times ~ -1 + age + sex + wbc ,data = data),'dgTMatrix')
BX <- as(cbind(B,X),'dgTMatrix')
Amat <- Diagonal(n = nrow(data),x = 1)
censor <- dataformodelling$cens[-1] # 1 == not censored, confusing but more useful.
# Differencing
create_diff_matrix <- function(n) {
cbind(Matrix(1,n-1,1),Diagonal(n-1,-1))
}
create_diff_matrix(n)
abcoxph:::create_diff_matrix
abcoxph:::create_diff_matrix(n)
censor <- data$cens[-1] # 1 == not censored, confusing but more useful.
censor
Zmat <- diffmat %*% BX
Zmat <- D %*% BX
Zmat
Q_matrix
p
ncol(BX)
ncol(mm)+ncol(X)
ncol(X)
X
p <- ncol(X)
p
ncol(P) + ncol(X)
ncol(BX)
### setup the spatial term
Q_matrix <- function(theta) {
# theta = log(sigma), log(rho), log(Sigma)
theta <- as.numeric(unname(theta))
# RW2 is P matrix
# Matern
mm <- geostatsp::matern(
pointsdata,
param = c("variance" = exp(2 * theta[1]),"range" = exp(theta[2]),"shape" = 1),
type = "precision"
)
# fixed effect
bb <- beta_prec * diag(p)
rbind(
cbind(P,Matrix(0,nrow = nrow(P),ncol = (ncol(mm)+ncol(X)),sparse = FALSE)),
cbind(Matrix(0,nrow = p,ncol = ncol(P),sparse = FALSE),bb, Matrix(0,nrow = p,ncol = ncol(mm),sparse = FALSE)),
cbind(Matrix(0,nrow = nrow(mm),ncol = (ncol(P) + ncol(X)),sparse = FALSE),mm)
)
}
theta <- c(1,2,3)
-0.5 * exp(theta[3]) * P
# Prior
Q_matrix <- function(theta) {
# theta = log(sigma), log(rho), log(Sigma)
theta <- as.numeric(unname(theta))
# RW2 is P matrix
P2 <- -0.5 * exp(theta[3]) * P
# Matern
mm <- geostatsp::matern(
pointsdata,
param = c("variance" = exp(2 * theta[1]),"range" = exp(theta[2]),"shape" = 1),
type = "precision"
)
# fixed effect
bb <- beta_prec * diag(p)
rbind(
cbind(P2,Matrix(0,nrow = nrow(P2),ncol = (ncol(mm)+ncol(X)),sparse = FALSE)),
cbind(Matrix(0,nrow = p,ncol = ncol(P2),sparse = FALSE),bb, Matrix(0,nrow = p,ncol = ncol(mm),sparse = FALSE)),
cbind(Matrix(0,nrow = nrow(mm),ncol = (ncol(P2) + ncol(X)),sparse = FALSE),mm)
)
}
Q_matrix(c(1,2,3))
