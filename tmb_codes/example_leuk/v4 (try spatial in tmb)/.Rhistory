sig <- get_sigma(kappa, tau)
rho <- get_rho(kappa, tau)
# Simulate from the two fields
capture.output({
fieldlist[[i]] <- geostatsp::RFsimulate(
model = c("variance" = sig^2,"range" = rho,"shape" = maternconstants$nu),
data = fielddat,
x = raster(fielddat,nrows = resolution$nrow,ncols = resolution$ncol),
n = 1
)
})
}
brick(fieldlist)
}
simstodo <- sample(ncol(posterior_samples$samps),100,replace = FALSE)
fieldsbrick <- simulate_spatial_fields(
U = posterior_samples$samps[1:n,simstodo],
theta = posterior_samples$theta[simstodo, 2:3],
pointsdata = pointsdata,
resolution = list(nrow = 400,ncol = 200)
)
save(fieldsbrick, file = "fieldsbrick.rda")
###### Spatial plot:
ukBorderLL = raster::getData("GADM", country='GBR', level=3) # Regions
ukBorder = spTransform(ukBorderLL, projection(pointsdata))
# ukBorder = ukBorder[ukBorder$NAME_1 %in% c("England","Wales"), ]
# ukBorder = raster::crop(ukBorder, extent(pointsdata))
# TODO: Plot only polygons that have a point in them, this isn't quite what's being done
pointsinpoly <- pointsdata %over% ukBorder
pointsinpolyID <- unique(pointsinpoly$GID_2)
ukBorder <- ukBorder[ukBorder$GID_2 %in% pointsinpolyID, ]
# Get the outer border
ukBorderouter <- rgeos::gUnaryUnion(ukBorder)
simfieldsmean <- mean(exp(fieldsbrick))
simfieldsexceedence <- mean(fieldsbrick > log(1.2))
# MEAN
plotraster <- simfieldsmean
predcols <- mapmisc::colourScale(
plotraster,
breaks = quantile(values(plotraster),probs = (0:9)/9),
style = "fixed",
col = "Spectral",
rev = TRUE,
# transform='log',
dec = -log10(0.05)
)
colvals <- 100
bigvalues <- quantile(values(plotraster),probs = (0:(colvals-1))/(colvals-1))
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(plotraster, col=predcols$col, breaks=predcols$breaks, legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n',inset=0)
# EXCEEDENCE PROBABILITIES
plotraster <- simfieldsexceedence
predcols <- mapmisc::colourScale(
plotraster,
breaks = c(0,0.05,0.1,0.15,0.2,0.3,0.5,0.65),
style = "fixed",
col = "Spectral",
rev = TRUE
)
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n')
# EXCEEDENCE PROBABILITIES
plotraster <- simfieldsexceedence
predcols <- mapmisc::colourScale(
plotraster,
breaks = c(0,0.05,0.1,0.15,0.2,0.3,0.5,0.65),
style = "fixed",
col = "Spectral",
rev = TRUE
)
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n')
# EXCEEDENCE PROBABILITIES
plotraster <- simfieldsexceedence
predcols <- mapmisc::colourScale(
plotraster,
breaks = c(0.05,0.1,0.15,0.2,0.3,0.5,0.65),
style = "fixed",
col = "Spectral",
rev = TRUE
)
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n')
predcols <- mapmisc::colourScale(
plotraster,
breaks = c(0.01,0.05,0.1,0.15,0.2,0.3,0.5,0.65),
style = "fixed",
col = "Spectral",
rev = TRUE
)
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n')
# EXCEEDENCE PROBABILITIES
plotraster <- simfieldsexceedence
predcols <- mapmisc::colourScale(
plotraster,
breaks = c(0,0.05,0.1,0.15,0.2,0.3,0.5,0.65),
style = "fixed",
col = "Spectral",
rev = TRUE
)
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n')
# MEAN
plotraster <- simfieldsmean
predcols <- mapmisc::colourScale(
plotraster,
breaks = quantile(values(plotraster),probs = (0:9)/9),
style = "fixed",
col = "Spectral",
rev = TRUE,
# transform='log',
dec = -log10(0.05)
)
colvals <- 100
bigvalues <- quantile(values(plotraster),probs = (0:(colvals-1))/(colvals-1))
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(plotraster, col=predcols$col, breaks=predcols$breaks, legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n',inset=0)
simfieldsexceedence
# EXCEEDENCE PROBABILITIES
plotraster <- simfieldsexceedence
predcols <- mapmisc::colourScale(
plotraster,
breaks = c(0,0.05,0.1,0.15,0.2,0.3,0.5,0.65),
style = "fixed",
col = "Spectral",
rev = TRUE
)
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
simfieldsexceedence <- mean(fieldsbrick > log(0.8))
# EXCEEDENCE PROBABILITIES
plotraster <- simfieldsexceedence
predcols <- mapmisc::colourScale(
plotraster,
breaks = c(0,0.05,0.1,0.15,0.2,0.3,0.5,0.65),
style = "fixed",
col = "Spectral",
rev = TRUE
)
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n')
simfieldsmean <- mean(exp(fieldsbrick))
simfieldsexceedence <- mean(fieldsbrick > log(1.5))
# MEAN
plotraster <- simfieldsmean
predcols <- mapmisc::colourScale(
plotraster,
breaks = quantile(values(plotraster),probs = (0:9)/9),
style = "fixed",
col = "Spectral",
rev = TRUE,
# transform='log',
dec = -log10(0.05)
)
colvals <- 100
bigvalues <- quantile(values(plotraster),probs = (0:(colvals-1))/(colvals-1))
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(plotraster, col=predcols$col, breaks=predcols$breaks, legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n',inset=0)
# EXCEEDENCE PROBABILITIES
plotraster <- simfieldsexceedence
predcols <- mapmisc::colourScale(
plotraster,
breaks = c(0,0.05,0.1,0.15,0.2,0.3,0.5,0.65),
style = "fixed",
col = "Spectral",
rev = TRUE
)
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n')
###### Spatial plot:
ukBorderLL = raster::getData("GADM", country='GBR', level=3) # Regions
ukBorder = spTransform(ukBorderLL, projection(pointsdata))
# ukBorder = ukBorder[ukBorder$NAME_1 %in% c("England","Wales"), ]
# ukBorder = raster::crop(ukBorder, extent(pointsdata))
# TODO: Plot only polygons that have a point in them, this isn't quite what's being done
pointsinpoly <- pointsdata %over% ukBorder
pointsinpolyID <- unique(pointsinpoly$GID_2)
ukBorder <- ukBorder[ukBorder$GID_2 %in% pointsinpolyID, ]
# Get the outer border
ukBorderouter <- rgeos::gUnaryUnion(ukBorder)
simfieldsmean <- mean(exp(fieldsbrick))
simfieldsexceedence <- mean(fieldsbrick > log(1.5))
# MEAN
plotraster <- simfieldsmean
predcols <- mapmisc::colourScale(
plotraster,
breaks = quantile(values(plotraster),probs = (0:9)/9),
style = "fixed",
col = "Spectral",
rev = TRUE,
# transform='log',
dec = -log10(0.05)
)
colvals <- 100
bigvalues <- quantile(values(plotraster),probs = (0:(colvals-1))/(colvals-1))
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(plotraster, col=predcols$col, breaks=predcols$breaks, legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n',inset=0)
# EXCEEDENCE PROBABILITIES
plotraster <- simfieldsexceedence
predcols <- mapmisc::colourScale(
plotraster,
breaks = c(0,0.05,0.1,0.15,0.2,0.3,0.5,0.65),
style = "fixed",
col = "Spectral",
rev = TRUE
)
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n')
###### Spatial plot:
ukBorderLL = raster::getData("GADM", country='GBR', level=3) # Regions
ukBorder = spTransform(ukBorderLL, projection(pointsdata))
# ukBorder = ukBorder[ukBorder$NAME_1 %in% c("England","Wales"), ]
# ukBorder = raster::crop(ukBorder, extent(pointsdata))
# TODO: Plot only polygons that have a point in them, this isn't quite what's being done
pointsinpoly <- pointsdata %over% ukBorder
pointsinpolyID <- unique(pointsinpoly$GID_2)
ukBorder <- ukBorder[ukBorder$GID_2 %in% pointsinpolyID, ]
# Get the outer border
ukBorderouter <- rgeos::gUnaryUnion(ukBorder)
simfieldsmean <- mean(exp(fieldsbrick))
simfieldsexceedence <- mean(fieldsbrick > log(1.5))
# MEAN
plotraster <- simfieldsmean
predcols <- mapmisc::colourScale(
plotraster,
breaks = quantile(values(plotraster),probs = (0:9)/9),
style = "fixed",
col = "Spectral",
rev = TRUE,
# transform='log',
dec = -log10(0.05)
)
colvals <- 100
bigvalues <- quantile(values(plotraster),probs = (0:(colvals-1))/(colvals-1))
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(plotraster, col=predcols$col, breaks=predcols$breaks, legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n',inset=0)
# EXCEEDENCE PROBABILITIES
plotraster <- simfieldsexceedence
predcols <- mapmisc::colourScale(
plotraster,
breaks = c(0,0.05,0.1,0.15,0.2,0.3,0.5,0.65),
style = "fixed",
col = "Spectral",
rev = TRUE
)
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n')
# Construct the plot
ploteta <- plotB %*% RWpostMean
samplestoplot <- RWsamps[ ,sample(1:ncol(RWsamps),200,replace = FALSE)]
plot(plotx,ploteta,type='l',ylim=c(-0.5,0.5))
for (i in 1:ncol(samplestoplot)) {
WS <- samplestoplot[ ,i]
US <- WS[1:ncol(P)]
plotetaS <- plotB %*% US
plotetaS <- plotetaS - mean(plotetaS)
lines(plotx,plotetaS,col = 'lightgray')
}
lines(plotx,ploteta)
# get pointwise SD of eta
etaplot <- list()
for (i in 1:ncol(RWsamps)) {
W <- RWsamps[ ,i]
U <- W[1:ncol(P)]
eta <- as.numeric(plotB %*% U)
etaplot[[i]] <- data.frame(
x = plotx,
eta = eta - mean(eta)
)
}
etaplotframe <- purrr::reduce(etaplot,rbind) %>%
group_by(x) %>%
summarize(etamean = mean(eta),etasd = sd(eta)) %>%
mutate(lower = etamean - 2*etasd,upper = etamean + 2*etasd)
with(etaplotframe,plot(x,etamean,type='l',ylim = c(-0.5,0.5)))
with(etaplotframe,lines(x,lower,type='l',lty='dashed'))
with(etaplotframe,lines(x,upper,type='l',lty='dashed'))
#### RW2 Smoothing:
RWid <- n + (1:ncol(Bmat)) # Note: first index is intercept, not actually estimable here
RWsamps <- posterior_samples$samps[RWid, ]
RWpostMean <- apply(RWsamps,1,mean)
# Construct a plot
plotx <- seq(a,b,by=0.01)
plotdat <- data.frame(x = plotx)
plotB <- mgcv::smooth.construct(s(x,bs='bs',m=c(4-1,0),k=length(splineknots)-4),data = plotdat,knots = list(x = splineknots))$X
# Construct the plot
ploteta <- plotB %*% RWpostMean
samplestoplot <- RWsamps[ ,sample(1:ncol(RWsamps),200,replace = FALSE)]
plot(plotx,ploteta,type='l',ylim=c(-0.5,0.5))
for (i in 1:ncol(samplestoplot)) {
WS <- samplestoplot[ ,i]
US <- WS[1:ncol(P)]
plotetaS <- plotB %*% US
plotetaS <- plotetaS - mean(plotetaS)
lines(plotx,plotetaS,col = 'lightgray')
}
lines(plotx,ploteta)
# get pointwise SD of eta
etaplot <- list()
for (i in 1:ncol(RWsamps)) {
W <- RWsamps[ ,i]
U <- W[1:ncol(P)]
eta <- as.numeric(plotB %*% U)
etaplot[[i]] <- data.frame(
x = plotx,
eta = eta - mean(eta)
)
}
etaplotframe <- purrr::reduce(etaplot,rbind) %>%
group_by(x) %>%
summarize(etamean = mean(eta),etasd = sd(eta)) %>%
mutate(lower = etamean - 2*etasd,upper = etamean + 2*etasd)
with(etaplotframe,plot(x,etamean,type='l',ylim = c(-0.5,0.5)))
with(etaplotframe,lines(x,lower,type='l',lty='dashed'))
with(etaplotframe,lines(x,upper,type='l',lty='dashed'))
etaplotframe
etaplotframe %>% ggplot(aes(x,etamean)) + geom_line()
etaplotframe %>% ggplot(aes(x,etamean)) + geom_line(linetype = "solid")
etaplotframe %>% ggplot(aes(x,etamean)) + geom_line(linetype = "solid") + geom_line(aes(x,lower,linetype = "dashed"))
etaplotframe %>% ggplot(aes(x,etamean)) + geom_line(linetypes = "solid") + geom_line(aes(x,lower,linetypes = "dashed"))
etaplotframe %>% ggplot(aes(x,etamean)) + geom_line(linetype = "solid") + geom_line(aes(x,lower), linetype = "dashed")
etaplotframe %>% ggplot(aes(x,etamean)) + geom_line(linetype = "solid") + geom_line(aes(x,lower), linetype = "dashed") +
geom_line(aes(x,upper), linetype = "dashed")
etaplotframe %>% ggplot(aes(x,etamean)) + geom_line(linetype = "solid") + geom_line(aes(x,lower), linetype = "dashed") +
geom_line(aes(x,upper), linetype = "dashed") +
theme_classic(base_size = TEXT_SIZE)
etaplotframe %>% ggplot(aes(x,etamean)) + geom_line(linetype = "solid") + geom_line(aes(x,lower), linetype = "dashed") +
geom_line(aes(x,upper), linetype = "dashed") +
theme_classic(base_size = TEXT_SIZE) + ylab("") + xlab("tpi")
###### Spatial plot:
ukBorderLL = raster::getData("GADM", country='GBR', level=3) # Regions
ukBorder = spTransform(ukBorderLL, projection(pointsdata))
# ukBorder = ukBorder[ukBorder$NAME_1 %in% c("England","Wales"), ]
# ukBorder = raster::crop(ukBorder, extent(pointsdata))
# TODO: Plot only polygons that have a point in them, this isn't quite what's being done
pointsinpoly <- pointsdata %over% ukBorder
pointsinpolyID <- unique(pointsinpoly$GID_2)
ukBorder <- ukBorder[ukBorder$GID_2 %in% pointsinpolyID, ]
# Get the outer border
ukBorderouter <- rgeos::gUnaryUnion(ukBorder)
simfieldsmean <- mean(exp(fieldsbrick))
simfieldsexceedence <- mean(fieldsbrick > log(1.5))
# MEAN
plotraster <- simfieldsmean
predcols <- mapmisc::colourScale(
plotraster,
breaks = quantile(values(plotraster),probs = (0:9)/9),
style = "fixed",
col = "Spectral",
rev = TRUE,
# transform='log',
dec = -log10(0.05)
)
colvals <- 100
bigvalues <- quantile(values(plotraster),probs = (0:(colvals-1))/(colvals-1))
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(plotraster, col=predcols$col, breaks=predcols$breaks, legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n',inset=0)
# EXCEEDENCE PROBABILITIES
plotraster <- simfieldsexceedence
predcols <- mapmisc::colourScale(
plotraster,
breaks = c(0,0.05,0.1,0.15,0.2,0.3,0.5,0.65),
style = "fixed",
col = "Spectral",
rev = TRUE
)
plotraster <- mask(plotraster, ukBorder)
mapmisc::map.new(pointsdata)
plot(plotraster,
col = predcols$col,
breaks = predcols$breaks,
legend=FALSE, add=TRUE)
plot(ukBorder, add=TRUE,border=mapmisc::col2html("black", 0.5), lwd=0.5)
plot(ukBorderouter,add = TRUE)
points(pointsdata,pch = ".")
mapmisc::legendBreaks('topright', predcols, cex=1.5, bty='n')
RFsimulate
?RFsimulate
fieldsbrick
fieldsbrick[1,]
