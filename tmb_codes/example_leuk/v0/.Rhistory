)
}
etaplotframe <- purrr::reduce(etaplot,rbind) %>%
group_by(x) %>%
summarize(etamean = mean(eta),etasd = sd(eta)) %>%
mutate(lower = etamean - 2*etasd,upper = etamean + 2*etasd)
with(etaplotframe,plot(x,etamean,type='l',ylim = c(-0.5,0.5)))
with(etaplotframe,lines(x,lower,type='l',lty='dashed'))
with(etaplotframe,lines(x,upper,type='l',lty='dashed'))
Diagonal(0.001, 5)
diagonal(0.001, 5)
diag(0.001, ncol = 5)
diag(0.001, ncol = 5, nrow = 5)
precompile()
TEXT_SIZE = 25
### Setup_data:
set.seed(1234)
data <- Leuk %>% select(c("time","cens","age","sex","wbc","tpi"))
names(data)[1] <- "times"
data <- abcoxph:::arrange_data(data)
data$ranks <- rank(data$times, ties.method = "min")
hist(data$times,breaks = 100)
## setup smoothing part:
a <- min(data$tpi)
b <- max(data$tpi) # boundary
n <- nrow(data)
# Order of spline
p <- 4 # 4 = cubic
# Order of derivative penalty
m <- 2
# Number of INTERIOR knots
d <- 20
# Number of knots
T <- d + p
# The knots
intknots <- seq(a,b,length.out = d)
leftknots <- seq(min(intknots)-(p-1),min(intknots)-1,by=1)
rightknots <- seq(max(intknots)+1,max(intknots)+p-1,by=1)
splineknots <- sort(unique(c(leftknots,intknots,rightknots)))
construct_design <- function(x,splineknots,p,m) {
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
B <- BB$X
B <- as(B,"dgTMatrix")
B
}
construct_penalty <- function(x,splineknots,p,m, noise = 0.0001) {
BD <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,m),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
# BD$S[[1]] + BB$S[[1]] # O'sullivan spline "of the third kind"
BD$S[[1]] + diag(noise, ncol = ncol(BD$S[[1]]), nrow = nrow(BD$S[[1]])) #### add a very small noise to make the penalty matrix full rank
}
P <- as(construct_penalty(data$tpi,splineknots,p,m, noise = 0.0001),'dgTMatrix')
B <- as(construct_design(data$tpi,splineknots,p,m),'dgTMatrix')
D <- abcoxph:::create_diff_matrix(n)
X <- as.matrix(data[,3:5])
BX <- as(cbind(B,X),'dgTMatrix')
### Setup TMB:
tmbdat <- list(
# Design matrix
BX = BX,
# Penalty matrix
P = P,
# Differencing matrix
D = D,
# Log determinant of penalty matrix (without the sigma part)
logPdet = as.numeric(determinant(P,logarithm = TRUE)$modulus),
# Response
ranks = as.integer(data$ranks),
cens = as.integer(data$cens),
# Prior params
u = 2,
alpha = 0.5
)
tmbparams <- list(
W = rep(0,ncol(BX)), # W = c(U); U = B-Spline coefficients
theta = 0 # -2log(sigma)
)
# TMB function template
# compile("00_coxph_leuk.cpp")
dyn.load(dynlib("00_coxph_leuk"))
start_time <- Sys.time()
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "00_coxph_leuk",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,7,0)
# Plot of theta posterior
logpostsigma <- compute_pdf_and_cdf(quad$marginals[[1]],list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)), interpolation = "spline")
with(logpostsigma,plot(transparam,pdf_transparam,type='l'))
# Inference for W
samps <- sample_marginal(quad,40000,interpolation = "spline")
end_time <- Sys.time()
runtime_aghq <- end_time - start_time
# Plot of curve
# Posterior mean
W <- apply(samps$samps,1,mean)
U <- W[1:ncol(P)]
beta <- W[(ncol(P)+1):ncol(BX)]
# Construct a plot
plotx <- seq(a,b,by=0.01)
plotdat <- data.frame(x = plotx)
plotB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = plotdat,knots = list(x = splineknots))$X
# Construct the plot
ploteta <- plotB %*% U
ploteta <- ploteta - mean(ploteta)
plot(plotx,ploteta,type='l',ylim=c(-0.5,0.5))
# Plot the samples
samplestoplot <- samps$samps[ ,sample(1:ncol(samps$samps),200,replace = FALSE)]
for (i in 1:ncol(samplestoplot)) {
WS <- samplestoplot[ ,i]
US <- WS[1:ncol(P)]
plotetaS <- plotB %*% US
plotetaS <- plotetaS - mean(plotetaS)
lines(plotx,plotetaS,col = 'lightgray')
}
lines(plotx,ploteta)
# get pointwise SD of eta
etaplot <- list()
for (i in 1:ncol(samps$samps)) {
W <- samps$samps[ ,i]
U <- W[1:ncol(P)]
eta <- as.numeric(plotB %*% U)
etaplot[[i]] <- data.frame(
x = plotx,
eta = eta - mean(eta)
)
}
etaplotframe <- purrr::reduce(etaplot,rbind) %>%
group_by(x) %>%
summarize(etamean = mean(eta),etasd = sd(eta)) %>%
mutate(lower = etamean - 2*etasd,upper = etamean + 2*etasd)
with(etaplotframe,plot(x,etamean,type='l',ylim = c(-0.5,0.5)))
with(etaplotframe,lines(x,lower,type='l',lty='dashed'))
with(etaplotframe,lines(x,upper,type='l',lty='dashed'))
# Inference for W
samps <- sample_marginal(quad,3000,interpolation = "spline")
end_time <- Sys.time()
runtime_aghq <- end_time - start_time
# Plot of curve
# Posterior mean
W <- apply(samps$samps,1,mean)
U <- W[1:ncol(P)]
beta <- W[(ncol(P)+1):ncol(BX)]
# Construct a plot
plotx <- seq(a,b,by=0.01)
plotdat <- data.frame(x = plotx)
plotB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = plotdat,knots = list(x = splineknots))$X
# Construct the plot
ploteta <- plotB %*% U
ploteta <- ploteta - mean(ploteta)
plot(plotx,ploteta,type='l',ylim=c(-0.5,0.5))
# Plot the samples
samplestoplot <- samps$samps[ ,sample(1:ncol(samps$samps),200,replace = FALSE)]
for (i in 1:ncol(samplestoplot)) {
WS <- samplestoplot[ ,i]
US <- WS[1:ncol(P)]
plotetaS <- plotB %*% US
plotetaS <- plotetaS - mean(plotetaS)
lines(plotx,plotetaS,col = 'lightgray')
}
lines(plotx,ploteta)
# Check mgcv
mgcv_knots <- data.frame(x = splineknots)
mgcvmod_bs <- mgcv::gam(
times ~ age + sex + wbc + s(tpi,bs='bs',m=c(p-1,m),k=length(splineknots)-p),
data = data,
family = cox.ph(),
knots = mgcv_knots,
weights = cens
)
mgcv_bs_pred <- predict(mgcvmod_bs,newdata = data.frame(tpi = plotx, age = rep(0, length(plotx)), sex = rep(0, length(plotx)), wbc = rep(0, length(plotx))),se.fit = TRUE)
mgcv_bs_pred$fit <- mgcv_bs_pred$fit - mean(mgcv_bs_pred$fit)
plot(plotx,mgcv_bs_pred$fit,type = 'l',ylim = c(-0.5,0.5))
lines(plotx,(mgcv_bs_pred$fit - 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
lines(plotx,(mgcv_bs_pred$fit + 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
### INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
data$tpi_binned <- abcoxph:::bin_covariate(data$tpi,bins = 50, type = "equal")
formula <- inla.surv(times,cens) ~ age + sex + wbc + f(tpi_binned,model = 'rw2',constr = T, hyper = prior.prec)
Inlaresult <- inla(formula = formula,data = data, family = "coxph")
fhat <- Inlaresult$summary.random$tpi_binned$mean
fup <- Inlaresult$summary.random$tpi_binned$`0.975quant`
flo <- Inlaresult$summary.random$tpi_binned$`0.025quant`
plotINLA <- data.frame(x = Inlaresult$summary.random$tpi_binned$ID, f = fhat, up = fup, lo = flo)
plot(plotINLA$x,plotINLA$f,type = 'l',ylim = c(-0.5,0.5))
lines(plotINLA$x,plotINLA$up,type='l',lty='dashed')
lines(plotINLA$x,plotINLA$lo,type='l',lty='dashed')
### INLA's inferred baseline
INLA_base <- bri.basehaz.plot(Inlaresult, plot = F)
INLA_base$basehaz <- exp(INLA_base$basehaz)
INLA_base <- data.frame(INLA_base)
ggplot(INLA_base, aes(time,basehaz)) + geom_line()
##### overall comparison:
overall <- tibble(tpi = c(etaplotframe$x, plotINLA$x, plotx), y = c(etaplotframe$etamean,plotINLA$f,mgcv_bs_pred$fit),
type = c(rep("aghq",times = length(etaplotframe$x)), rep("INLA", times = length(plotINLA$x)), rep("mgcv",times = length(plotx)))  )
overall %>% mutate(y = exp(y)) %>% ggplot(aes(tpi,y,color = type)) + geom_line()
etaplotframe <- purrr::reduce(etaplot,rbind) %>%
group_by(x) %>%
summarize(etamean = mean(eta),etasd = sd(eta)) %>%
mutate(lower = etamean - 2*etasd,upper = etamean + 2*etasd)
with(etaplotframe,plot(x,etamean,type='l',ylim = c(-0.5,0.5)))
with(etaplotframe,lines(x,lower,type='l',lty='dashed'))
with(etaplotframe,lines(x,upper,type='l',lty='dashed'))
# get pointwise SD of eta
etaplot <- list()
for (i in 1:ncol(samps$samps)) {
W <- samps$samps[ ,i]
U <- W[1:ncol(P)]
eta <- as.numeric(plotB %*% U)
etaplot[[i]] <- data.frame(
x = plotx,
eta = eta - mean(eta)
)
}
etaplot
etaplotframe <- purrr::reduce(etaplot,rbind) %>%
group_by(x) %>%
summarize(etamean = mean(eta),etasd = sd(eta)) %>%
mutate(lower = etamean - 2*etasd,upper = etamean + 2*etasd)
with(etaplotframe,plot(x,etamean,type='l',ylim = c(-0.5,0.5)))
with(etaplotframe,lines(x,lower,type='l',lty='dashed'))
with(etaplotframe,lines(x,upper,type='l',lty='dashed'))
# Check mgcv
mgcv_knots <- data.frame(x = splineknots)
mgcvmod_bs <- mgcv::gam(
times ~ age + sex + wbc + s(tpi,bs='bs',m=c(p-1,m),k=length(splineknots)-p),
data = data,
family = cox.ph(),
knots = mgcv_knots,
weights = cens
)
mgcv_bs_pred <- predict(mgcvmod_bs,newdata = data.frame(tpi = plotx, age = rep(0, length(plotx)), sex = rep(0, length(plotx)), wbc = rep(0, length(plotx))),se.fit = TRUE)
mgcv_bs_pred$fit <- mgcv_bs_pred$fit - mean(mgcv_bs_pred$fit)
plot(plotx,mgcv_bs_pred$fit,type = 'l',ylim = c(-0.5,0.5))
lines(plotx,(mgcv_bs_pred$fit - 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
lines(plotx,(mgcv_bs_pred$fit + 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
### INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
data$tpi_binned <- abcoxph:::bin_covariate(data$tpi,bins = 50, type = "equal")
formula <- inla.surv(times,cens) ~ age + sex + wbc + f(tpi_binned,model = 'rw2',constr = T, hyper = prior.prec)
Inlaresult <- inla(formula = formula,data = data, family = "coxph")
fhat <- Inlaresult$summary.random$tpi_binned$mean
fup <- Inlaresult$summary.random$tpi_binned$`0.975quant`
flo <- Inlaresult$summary.random$tpi_binned$`0.025quant`
plotINLA <- data.frame(x = Inlaresult$summary.random$tpi_binned$ID, f = fhat, up = fup, lo = flo)
plot(plotINLA$x,plotINLA$f,type = 'l',ylim = c(-0.5,0.5))
lines(plotINLA$x,plotINLA$up,type='l',lty='dashed')
lines(plotINLA$x,plotINLA$lo,type='l',lty='dashed')
### INLA's inferred baseline
INLA_base <- bri.basehaz.plot(Inlaresult, plot = F)
INLA_base$basehaz <- exp(INLA_base$basehaz)
INLA_base <- data.frame(INLA_base)
ggplot(INLA_base, aes(time,basehaz)) + geom_line()
##### overall comparison:
overall <- tibble(tpi = c(etaplotframe$x, plotINLA$x, plotx), y = c(etaplotframe$etamean,plotINLA$f,mgcv_bs_pred$fit),
type = c(rep("aghq",times = length(etaplotframe$x)), rep("INLA", times = length(plotINLA$x)), rep("mgcv",times = length(plotx)))  )
overall %>% mutate(y = exp(y)) %>% ggplot(aes(tpi,y,color = type)) + geom_line()
##### overall comparison:
overall <- tibble(tpi = c(etaplotframe$x, plotINLA$x, plotx), y = c(etaplotframe$etamean,plotINLA$f,mgcv_bs_pred$fit),
type = c(rep("Proposed",times = length(etaplotframe$x)), rep("INLA", times = length(plotINLA$x)), rep("mgcv",times = length(plotx)))  )
overall %>% mutate(y = exp(y)) %>% ggplot(aes(tpi,y,color = type)) + geom_line()
baseline
baseline <- Simulate_baseline()
## Simulating function:
### Simulation Example
Simulate_baseline <- function(timelim = 300, breaks = 0.001, cut = 40){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-(0.05) *(c-min(c))
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
Simulate_data_extreme <- function(N = 1000, truth, RW2BINS = 50, baseline){
tdom <- baseline$time
timelim <- baseline$timelim[1]
haz <- baseline$hazard
if(truth == "smooth"){
u <- runif(N)
x <- runif(N,min = 0, max = 6)
truefunc <- function(x) log((x + 1)^2) - 1
eta <- truefunc(x)
}
else{
u <- runif(N)
x <- runif(N,min = -6, max = 6)
truefunc <- function(x) 1.5*(sin(0.8*x))
eta <- truefunc(x)
}
failtimes <- c()
for (i in 1:N) {
hazz <- haz * exp(eta[i])
cumhaz <- cumsum(hazz*0.001)
Surv <- exp(-cumhaz)
failtimes[i] <- tdom[colSums(outer(Surv, u[i], `>`))]
}
data <- data_frame(x = x,times = failtimes, entry = rep(0,length(length(u))),censoring = ifelse(failtimes >= timelim,yes = 0, no=1))
for (i in 1:length(data$censoring)) {
if (data$censoring[i] == 1) {data$censoring[i] <- rbinom(n = 1,size = 1,prob = 0.9)}
}
data <- rename(data,exposure = x)
data <- data %>% as_tibble() %>%
mutate(exposure_binned = abcoxph:::bin_covariate(exposure,bins = RW2BINS,type = "equal"))
data
}
M <- 300
## simulate data:
set.seed(1234)
baseline <- Simulate_baseline()
baseline
ggplot(baseline,aes(x = time, y = hazard)) + geom_line() + theme(text = element_text(size = TEXT_SIZE))
TEXT_SIZE = 25
ggplot(baseline,aes(x = time, y = hazard)) + geom_line() + theme(text = element_text(size = TEXT_SIZE))
Simulate_baseline2 <- function(timelim = 300, breaks = 0.001, cut = 10){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-(0.05) *(c-min(c))
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
baseline2 <- Simulate_baseline2()
ggplot(baseline2,aes(x = time, y = hazard)) + geom_line() + theme(text = element_text(size = TEXT_SIZE))
Simulate_baseline2 <- function(timelim = 300, breaks = 0.001, cut = 10){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-0.05
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
baseline2 <- Simulate_baseline2()
ggplot(baseline2,aes(x = time, y = hazard)) + geom_line() + theme(text = element_text(size = TEXT_SIZE))
set.seed(1234)
Simulate_baseline3 <- function(timelim = 300, breaks = 0.001, cut = 1){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-0.05
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
baseline3 <- Simulate_baseline3()
ggplot(baseline3,aes(x = time, y = hazard)) + geom_line() + theme(text = element_text(size = TEXT_SIZE))
data <- Simulate_data_extreme(baseline = baseline2, truth = truth, N = N)
truth = "complicated", N = 1000
N = 1000
truth = "complicated"
data <- Simulate_data_extreme(baseline = baseline2, truth = truth, N = N)
data$times
hist(data$times)
set.seed(1234)
Simulate_baseline2 <- function(timelim = 300, breaks = 0.001, cut = 30){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-0.05
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
baseline2 <- Simulate_baseline2()
ggplot(baseline2,aes(x = time, y = hazard)) + geom_line() + theme(text = element_text(size = TEXT_SIZE))
#### Last Case: where baseline hazard is simple
set.seed(1234)
Simulate_baseline3 <- function(timelim = 300, breaks = 0.001, cut = 5){
timelim <- timelim
tdom <- seq(0, timelim, by = breaks)
haz <- rep(0, length(tdom))
cut <- cut
for (i in 1:cut) {
low <- as.numeric(quantile(tdom,(i-1)/cut))
high <- as.numeric(quantile(tdom,(i)/cut))
if(i %% 2 == 1){
a <- runif(1,0,1)
if(a > 0.3) haz[tdom<=high & tdom > low] <- 0.1
else {
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <-0.05
}
}
if(i %% 2 == 0){
a <- runif(1,0,1)
if(a > 0.8){
c <- tdom[tdom<=high & tdom > low]
haz[tdom<=high & tdom > low] <- 0.25
}
else{
haz[tdom<=high & tdom > low] <- sample(c(0.05,0.15),size = 1,prob = c(0.5,0.5))
}
}
}
baseline <- data.frame(time = tdom, hazard = haz, timelim = timelim)
}
baseline3 <- Simulate_baseline3()
ggplot(baseline3,aes(x = time, y = hazard)) + geom_line() + theme(text = element_text(size = TEXT_SIZE))
ggplot(baseline,aes(x = time, y = hazard)) + geom_line() + theme(text = element_text(size = TEXT_SIZE))
ggsave(filename = "base1")
ggsave(filename = "base1.png")
getwd()
