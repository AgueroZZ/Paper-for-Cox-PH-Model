# Log determinant of penalty matrix (without the sigma part)
logPdet = as.numeric(determinant(P,logarithm = TRUE)$modulus),
# Response
ranks = as.integer(dat$ranks),
cens = as.integer(dat$cens),
# Prior params
u = 2,
alpha = 0.5
)
tmbparams <- list(
W = rep(0,ncol(B)), # W = c(U); U = B-Spline coefficients
theta = 0 # -2log(sigma)
)
# TMB function template
compile("05_coxph_bspline.cpp")
dyn.load(dynlib("05_coxph_bspline"))
getwd()
setwd("/home/ziang/Documents/Paper-for-Cox-PH-Model/tmb_attempt/simulation_smoothing/v5")
# TMB function template
compile("05_coxph_bspline.cpp")
dyn.load(dynlib("05_coxph_bspline"))
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "05_coxph_bspline",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,12,0)
# Plot of theta posterior
logpostsigma <- compute_pdf_and_cdf(quad$marginals[[1]],list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)))
with(logpostsigma,plot(transparam,pdf_transparam,type='l'))
# Inference for W
samps <- sample_marginal(quad,2000)
# Plot of curve
# Posterior mean
W <- apply(samps$samps,1,mean)
U <- W[1:ncol(P)]
truefunc <- function(x) 1.5*(sin(0.8*x))
# Construct a plot
plotx <- seq(a,b,by=0.01)
plotdat <- data.frame(x = plotx)
plotB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = plotdat,knots = list(x = splineknots))$X
# Construct the plot
ploteta <- plotB %*% U
ploteta <- ploteta - ploteta[1]
plot(plotx,ploteta,type='l',ylim=c(-4,4))
# Plot the samples
samplestoplot <- samps$samps[ ,sample(1:ncol(samps$samps),200,replace = FALSE)]
for (i in 1:ncol(samplestoplot)) {
WS <- samplestoplot[ ,i]
US <- WS[1:ncol(P)]
plotetaS <- plotB %*% US
plotetaS <- plotetaS - mean(plotetaS)
lines(plotx,plotetaS,col = 'lightgray')
}
lines(plotx,ploteta)
lines(plotx,truefunc(plotx)-mean(truefunc(plotx)),col='red')
# Plot of curve
# Posterior mean
W <- apply(samps$samps,1,mean)
U <- W[1:ncol(P)]
truefunc <- function(x) 1.5*(sin(0.8*x))
# Construct a plot
plotx <- seq(a,b,by=0.01)
plotdat <- data.frame(x = plotx)
plotB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = plotdat,knots = list(x = splineknots))$X
# Construct the plot
ploteta <- plotB %*% U
ploteta <- ploteta - mean(ploteta)
plot(plotx,ploteta,type='l',ylim=c(-4,4))
# Plot the samples
samplestoplot <- samps$samps[ ,sample(1:ncol(samps$samps),200,replace = FALSE)]
for (i in 1:ncol(samplestoplot)) {
WS <- samplestoplot[ ,i]
US <- WS[1:ncol(P)]
plotetaS <- plotB %*% US
plotetaS <- plotetaS - mean(plotetaS)
lines(plotx,plotetaS,col = 'lightgray')
}
lines(plotx,ploteta)
lines(plotx,truefunc(plotx)-mean(truefunc(plotx)),col='red')
# Plot of curve
# Posterior mean
W <- apply(samps$samps,1,mean)
U <- W[1:ncol(P)]
truefunc <- function(x) 1.5*(sin(0.8*x))
# Construct a plot
plotx <- seq(a,b,by=0.01)
plotdat <- data.frame(x = plotx)
plotB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = plotdat,knots = list(x = splineknots))$X
# Construct the plot
ploteta <- plotB %*% U
ploteta <- ploteta - mean(ploteta)
plot(plotx,ploteta,type='l',ylim=c(-4,4))
# Plot the samples
samplestoplot <- samps$samps[ ,sample(1:ncol(samps$samps),200,replace = FALSE)]
for (i in 1:ncol(samplestoplot)) {
WS <- samplestoplot[ ,i]
US <- WS[1:ncol(P)]
plotetaS <- plotB %*% US
plotetaS <- plotetaS - mean(plotetaS)
lines(plotx,plotetaS,col = 'lightgray')
}
lines(plotx,ploteta)
lines(plotx,truefunc(plotx)-mean(truefunc(plotx)),col='red')
# get pointwise SD of eta
etaplot <- list()
for (i in 1:ncol(samps$samps)) {
W <- samps$samps[ ,i]
U <- W[1:ncol(P)]
eta <- as.numeric(plotB %*% U)
etaplot[[i]] <- data.frame(
x = plotx,
eta = eta - mean(eta)
)
}
etaplotframe <- purrr::reduce(etaplot,rbind) %>%
group_by(x) %>%
summarize(etamean = mean(eta),etasd = sd(eta)) %>%
mutate(lower = etamean - 2*etasd,upper = etamean + 2*etasd)
with(etaplotframe,plot(x,etamean,type='l',ylim = c(-4,4)))
with(etaplotframe,lines(x,lower,type='l',lty='dashed'))
with(etaplotframe,lines(x,upper,type='l',lty='dashed'))
lines(plotx,truefunc(plotx)-mean(truefunc(plotx)),col='red')
# Check mgcv
mgcv_knots <- data.frame(x = splineknots)
mgcvmod_bs <- mgcv::gam(
t ~ s(x,bs='bs',m=c(p-1,m),k=length(splineknots)-p),
data = dat,
family = cox.ph(),
knots = mgcv_knots
)
mgcv_bs_pred <- predict(mgcvmod_bs,newdata = data.frame(x = plotx),se.fit = TRUE)
mgcv_bs_pred$fit <- mgcv_bs_pred$fit - mean(mgcv_bs_pred$fit)
plot(plotx,mgcv_bs_pred$fit,type = 'l',ylim = c(-4,4))
lines(plotx,(mgcv_bs_pred$fit - 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
lines(plotx,(mgcv_bs_pred$fit + 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
lines(plotx,truefunc(plotx)-mean(truefunc(plotx)),col='red')
# Check INLA
# cnsA1 <- matrix(rep(0,50),nrow = 1)
# cnsA1[1] <- 1
# conse <- matrix(0, nrow = 1, ncol = 1)
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
formula <- inla.surv(times,censoring) ~ f(exposure_binned,model = 'rw2',constr = T, hyper = prior.prec)
Inlaresult <- inla(formula = formula,control.inla = list(strategy = 'gaussian',int.strategy = 'grid'),data = data, family = "coxph")
fhat <- Inlaresult$summary.random$exposure_binned$mean
fup <- Inlaresult$summary.random$exposure_binned$`0.975quant`
flo <- Inlaresult$summary.random$exposure_binned$`0.025quant`
plotINLA <- data.frame(x = Inlaresult$summary.random$exposure_binned$ID, f = fhat, up = fup, lo = flo)
plotINLA$true <- truefunc(plotINLA$x) - mean(truefunc(plotINLA$x))
plot(plotINLA$x,plotINLA$f,type = 'l',ylim = c(-4,4))
lines(plotINLA$x,plotINLA$up,type='l',lty='dashed')
lines(plotINLA$x,plotINLA$lo,type='l',lty='dashed')
lines(plotINLA$x,plotINLA$true,col='red')
# RMSE and coverage. There is no "true" W; they are weights for the basis function
# representation. Evaluate the quality of the function approximation instead
sampled_lambda <- construct_design(plotx,splineknots,p,m) %*% samps$samps
for (i in 1:ncol(sampled_lambda)) {
sampled_lambda[,i] <- sampled_lambda[,i] - mean(sampled_lambda[,i])
}
est_lambda <- apply(sampled_lambda,1,mean)
est_lambda <- est_lambda
lambda_lower <- apply(sampled_lambda,1,quantile,probs = .025)
lambda_upper <- apply(sampled_lambda,1,quantile,probs = .975)
true_lambda <- truefunc(plotx) - mean(truefunc(plotx))
plot(plotx,true_lambda,type='l',ylim = c(-5,5),col = 'red')
lines(plotx,est_lambda)
lines(plotx,lambda_lower,lty = 'dashed')
lines(plotx,lambda_upper,lty = 'dashed')
rmse_aghq <- sqrt( mean( (est_lambda - true_lambda)^2 ) )
covr_aghq <- mean(true_lambda <= lambda_upper & true_lambda >= lambda_lower)
# metrics
plot(plotx,(mgcv_bs_pred$fit),type = 'l',ylim = c(-5,5))
lines(plotx,(mgcv_bs_pred$fit - 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
lines(plotx,(mgcv_bs_pred$fit + 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
lines(plotx,(truefunc(plotx)-mean(truefunc(plotx))),col='red')
rmse_mgcv <- sqrt( mean( (((mgcv_bs_pred$fit) - ((truefunc(plotx)-mean(truefunc(plotx)))))^2)) )
covr_mgcv <- mean((((truefunc(plotx)-mean(truefunc(plotx)))) <= (mgcv_bs_pred$fit + 2*mgcv_bs_pred$se.fit) & ((truefunc(plotx)-mean(truefunc(plotx)))) >= (mgcv_bs_pred$fit - 2*mgcv_bs_pred$se.fit)))
plot(plotINLA$x,(plotINLA$f),type = 'l',ylim = c(-5,5))
lines(plotINLA$x,(plotINLA$lo),type='l',lty='dashed')
lines(plotINLA$x,(plotINLA$up),type='l',lty='dashed')
lines(plotINLA$x,plotINLA$true,col='red')
rmse_inla <- sqrt( mean( ((plotINLA$f) - (plotINLA$true))^2 ) )
covr_inla <- mean((plotINLA$true) <= (plotINLA$up) & (plotINLA$true) >= (plotINLA$lo))
data.frame(
method = c('AGHQ','MGCV','INLA'),
rmse = c(rmse_aghq,rmse_mgcv,rmse_inla),
coverage = c(covr_aghq,covr_mgcv,covr_inla)
)
set.seed(1234)
data <- Simulate_data_extreme(baseline = baseline, truth = "complicated", N = 1000)
data <- abcoxph:::arrange_data(data)
dat <- tibble(x = data$exposure, t = data$times, cens = data$censoring)
dat$ranks <- rank(dat$t, ties.method = "min")
hist(data$times,breaks = 100)
## setup smoothing part:
a <- min(dat$x)
b <- max(dat$x) # boundary
n <- nrow(dat)
# Order of spline
p <- 4 # 4 = cubic
# Order of derivative penalty
m <- 2
# Number of INTERIOR knots
d <- 42
# Number of knots
T <- d + p
# The knots
intknots <- seq(a,b,length.out = d)
leftknots <- seq(min(intknots)-(p-1),min(intknots)-1,by=1)
rightknots <- seq(max(intknots)+1,max(intknots)+p-1,by=1)
splineknots <- sort(unique(c(leftknots,intknots,rightknots)))
construct_design <- function(x,splineknots,p,m) {
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
B <- BB$X
B <- as(B,"dgTMatrix")
B
}
construct_penalty <- function(x,splineknots,p,m) {
BD <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,m),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
BB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = data.frame(x = x),knots = list(x = splineknots))
BD$S[[1]] + BB$S[[1]] # O'sullivan spline "of the third kind"
}
P <- as(construct_penalty(dat$x,splineknots,p,m),'dgTMatrix')
B <- as(construct_design(dat$x,splineknots,p,m),'dgTMatrix')
D <- abcoxph:::create_diff_matrix(n)
### Setup TMB:
tmbdat <- list(
# Design matrix
BX = B,
# Penalty matrix
P = P,
# Differencing matrix
D = D,
# Log determinant of penalty matrix (without the sigma part)
logPdet = as.numeric(determinant(P,logarithm = TRUE)$modulus),
# Response
ranks = as.integer(dat$ranks),
cens = as.integer(dat$cens),
# Prior params
u = 2,
alpha = 0.5
)
tmbparams <- list(
W = rep(0,ncol(B)), # W = c(U); U = B-Spline coefficients
theta = 0 # -2log(sigma)
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "05_coxph_bspline",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,12,0)
# Plot of theta posterior
logpostsigma <- compute_pdf_and_cdf(quad$marginals[[1]],list(totheta = function(x) -2*log(x),fromtheta = function(x) exp(-x/2)))
with(logpostsigma,plot(transparam,pdf_transparam,type='l'))
# Inference for W
samps <- sample_marginal(quad,2000)
# Plot of curve
# Posterior mean
W <- apply(samps$samps,1,mean)
U <- W[1:ncol(P)]
truefunc <- function(x) 1.5*(sin(0.8*x))
# Construct a plot
plotx <- seq(a,b,by=0.01)
plotdat <- data.frame(x = plotx)
plotB <- mgcv::smooth.construct(s(x,bs='bs',m=c(p-1,0),k=length(splineknots)-p),data = plotdat,knots = list(x = splineknots))$X
# Construct the plot
ploteta <- plotB %*% U
ploteta <- ploteta - mean(ploteta)
plot(plotx,ploteta,type='l',ylim=c(-4,4))
# Plot the samples
samplestoplot <- samps$samps[ ,sample(1:ncol(samps$samps),200,replace = FALSE)]
for (i in 1:ncol(samplestoplot)) {
WS <- samplestoplot[ ,i]
US <- WS[1:ncol(P)]
plotetaS <- plotB %*% US
plotetaS <- plotetaS - mean(plotetaS)
lines(plotx,plotetaS,col = 'lightgray')
}
lines(plotx,ploteta)
lines(plotx,truefunc(plotx)-mean(truefunc(plotx)),col='red')
# get pointwise SD of eta
etaplot <- list()
for (i in 1:ncol(samps$samps)) {
W <- samps$samps[ ,i]
U <- W[1:ncol(P)]
eta <- as.numeric(plotB %*% U)
etaplot[[i]] <- data.frame(
x = plotx,
eta = eta - mean(eta)
)
}
etaplotframe <- purrr::reduce(etaplot,rbind) %>%
group_by(x) %>%
summarize(etamean = mean(eta),etasd = sd(eta)) %>%
mutate(lower = etamean - 2*etasd,upper = etamean + 2*etasd)
with(etaplotframe,plot(x,etamean,type='l',ylim = c(-4,4)))
with(etaplotframe,lines(x,lower,type='l',lty='dashed'))
with(etaplotframe,lines(x,upper,type='l',lty='dashed'))
lines(plotx,truefunc(plotx)-mean(truefunc(plotx)),col='red')
# Check mgcv
mgcv_knots <- data.frame(x = splineknots)
mgcvmod_bs <- mgcv::gam(
t ~ s(x,bs='bs',m=c(p-1,m),k=length(splineknots)-p),
data = dat,
family = cox.ph(),
knots = mgcv_knots
)
mgcv_bs_pred <- predict(mgcvmod_bs,newdata = data.frame(x = plotx),se.fit = TRUE)
mgcv_bs_pred$fit <- mgcv_bs_pred$fit - mean(mgcv_bs_pred$fit)
plot(plotx,mgcv_bs_pred$fit,type = 'l',ylim = c(-4,4))
lines(plotx,(mgcv_bs_pred$fit - 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
lines(plotx,(mgcv_bs_pred$fit + 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
lines(plotx,truefunc(plotx)-mean(truefunc(plotx)),col='red')
# Check INLA
# cnsA1 <- matrix(rep(0,50),nrow = 1)
# cnsA1[1] <- 1
# conse <- matrix(0, nrow = 1, ncol = 1)
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
formula <- inla.surv(times,censoring) ~ f(exposure_binned,model = 'rw2',constr = T, hyper = prior.prec)
Inlaresult <- inla(formula = formula,control.inla = list(strategy = 'gaussian',int.strategy = 'grid'),data = data, family = "coxph")
fhat <- Inlaresult$summary.random$exposure_binned$mean
fup <- Inlaresult$summary.random$exposure_binned$`0.975quant`
flo <- Inlaresult$summary.random$exposure_binned$`0.025quant`
plotINLA <- data.frame(x = Inlaresult$summary.random$exposure_binned$ID, f = fhat, up = fup, lo = flo)
plotINLA$true <- truefunc(plotINLA$x) - mean(truefunc(plotINLA$x))
plot(plotINLA$x,plotINLA$f,type = 'l',ylim = c(-4,4))
lines(plotINLA$x,plotINLA$up,type='l',lty='dashed')
lines(plotINLA$x,plotINLA$lo,type='l',lty='dashed')
lines(plotINLA$x,plotINLA$true,col='red')
### INLA's inferred baseline
INLA_base <- bri.basehaz.plot(Inlaresult, plot = F)
INLA_base$basehaz <- exp(INLA_base$basehaz)
INLA_base <- data.frame(INLA_base)
ggplot(INLA_base, aes(time,basehaz)) + geom_line()
# RMSE and coverage. There is no "true" W; they are weights for the basis function
# representation. Evaluate the quality of the function approximation instead
sampled_lambda <- construct_design(plotx,splineknots,p,m) %*% samps$samps
for (i in 1:ncol(sampled_lambda)) {
sampled_lambda[,i] <- sampled_lambda[,i] - mean(sampled_lambda[,i])
}
est_lambda <- apply(sampled_lambda,1,mean)
est_lambda <- est_lambda
lambda_lower <- apply(sampled_lambda,1,quantile,probs = .025)
lambda_upper <- apply(sampled_lambda,1,quantile,probs = .975)
true_lambda <- truefunc(plotx) - mean(truefunc(plotx))
plot(plotx,true_lambda,type='l',ylim = c(-5,5),col = 'red')
lines(plotx,est_lambda)
lines(plotx,lambda_lower,lty = 'dashed')
lines(plotx,lambda_upper,lty = 'dashed')
rmse_aghq <- sqrt( mean( (est_lambda - true_lambda)^2 ) )
covr_aghq <- mean(true_lambda <= lambda_upper & true_lambda >= lambda_lower)
# metrics
plot(plotx,(mgcv_bs_pred$fit),type = 'l',ylim = c(-5,5))
lines(plotx,(mgcv_bs_pred$fit - 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
lines(plotx,(mgcv_bs_pred$fit + 2*mgcv_bs_pred$se.fit),type='l',lty='dashed')
lines(plotx,(truefunc(plotx)-mean(truefunc(plotx))),col='red')
rmse_mgcv <- sqrt( mean( (((mgcv_bs_pred$fit) - ((truefunc(plotx)-mean(truefunc(plotx)))))^2)) )
covr_mgcv <- mean((((truefunc(plotx)-mean(truefunc(plotx)))) <= (mgcv_bs_pred$fit + 2*mgcv_bs_pred$se.fit) & ((truefunc(plotx)-mean(truefunc(plotx)))) >= (mgcv_bs_pred$fit - 2*mgcv_bs_pred$se.fit)))
plot(plotINLA$x,(plotINLA$f),type = 'l',ylim = c(-5,5))
lines(plotINLA$x,(plotINLA$lo),type='l',lty='dashed')
lines(plotINLA$x,(plotINLA$up),type='l',lty='dashed')
lines(plotINLA$x,plotINLA$true,col='red')
rmse_inla <- sqrt( mean( ((plotINLA$f) - (plotINLA$true))^2 ) )
covr_inla <- mean((plotINLA$true) <= (plotINLA$up) & (plotINLA$true) >= (plotINLA$lo))
data.frame(
method = c('AGHQ','MGCV','INLA'),
rmse = c(rmse_aghq,rmse_mgcv,rmse_inla),
coverage = c(covr_aghq,covr_mgcv,covr_inla)
)
#### Aggregation through 300 aggregations:
repeating_smoothing_M_times <- function(M = 1, truth = "complicated", N = 1000 , baseline){
result <- tibble()
for(mm in 1:M){
data <- Simulate_data_extreme(baseline = baseline, truth = truth, N = N)
data <- abcoxph:::arrange_data(data)
dat <- tibble(x = data$exposure, t = data$times, cens = data$censoring)
dat$ranks <- rank(dat$t, ties.method = "min")
## setup smoothing part:
a <- min(dat$x)
b <- max(dat$x) # boundary
n <- nrow(dat)
# Order of spline
p <- 4 # 4 = cubic
# Order of derivative penalty
m <- 2
# Number of INTERIOR knots
d <- 42
# Number of knots
T <- d + p
# The knots
intknots <- seq(a,b,length.out = d)
leftknots <- seq(min(intknots)-(p-1),min(intknots)-1,by=1)
rightknots <- seq(max(intknots)+1,max(intknots)+p-1,by=1)
splineknots <- sort(unique(c(leftknots,intknots,rightknots)))
P <- as(construct_penalty(dat$x,splineknots,p,m),'dgTMatrix')
B <- as(construct_design(dat$x,splineknots,p,m),'dgTMatrix')
D <- abcoxph:::create_diff_matrix(n)
### Setup TMB:
tmbdat <- list(
# Design matrix
BX = B,
# Penalty matrix
P = P,
# Differencing matrix
D = D,
# Log determinant of penalty matrix (without the sigma part)
logPdet = as.numeric(determinant(P,logarithm = TRUE)$modulus),
# Response
ranks = as.integer(dat$ranks),
cens = as.integer(dat$cens),
# Prior params
u = 2,
alpha = 0.5
)
tmbparams <- list(
W = rep(0,ncol(B)), # W = c(U); U = B-Spline coefficients
theta = 0 # -2log(sigma)
)
ff <- TMB::MakeADFun(
data = tmbdat,
parameters = tmbparams,
random = "W",
DLL = "05_coxph_bspline",
silent = TRUE
)
# Hessian not implemented for RE models
ff$he <- function(w) numDeriv::jacobian(ff$gr,w)
# AGHQ
quad <- aghq::marginal_laplace_tmb(ff,12,0)
samps <- sample_marginal(quad,2000)
W <- apply(samps$samps,1,mean)
U <- W[1:ncol(P)]
truefunc <- function(x) 1.5*(sin(0.8*x))
plotx <- seq(a,b,by=0.01)
sampled_lambda <- construct_design(plotx,splineknots,p,m) %*% samps$samps
for (i in 1:ncol(sampled_lambda)) {
sampled_lambda[,i] <- sampled_lambda[,i] - mean(sampled_lambda[,i])
}
est_lambda <- apply(sampled_lambda,1,mean)
est_lambda <- est_lambda
lambda_lower <- apply(sampled_lambda,1,quantile,probs = .025)
lambda_upper <- apply(sampled_lambda,1,quantile,probs = .975)
true_lambda <- truefunc(plotx) - mean(truefunc(plotx))
rmse_aghq <- sqrt( mean( (est_lambda - true_lambda)^2 ) )
mse_aghq <- mean( (est_lambda - true_lambda)^2 )
covr_aghq <- mean(true_lambda <= lambda_upper & true_lambda >= lambda_lower)
### INLA:
prior.prec <- list(prec = list(prior = "pc.prec",
param = c(tmbdat$u, tmbdat$a)))
formula <- inla.surv(times,censoring) ~ f(exposure_binned,model = 'rw2',constr = T, hyper = prior.prec)
Inlaresult <- inla(formula = formula, data = data, family = "coxph")
fhat <- Inlaresult$summary.random$exposure_binned$mean
fup <- Inlaresult$summary.random$exposure_binned$`0.975quant`
flo <- Inlaresult$summary.random$exposure_binned$`0.025quant`
plotINLA <- data.frame(x = Inlaresult$summary.random$exposure_binned$ID, f = fhat, up = fup, lo = flo)
plotINLA$true <- truefunc(plotINLA$x) - mean(truefunc(plotINLA$x))
rmse_inla <- sqrt( mean( ((plotINLA$f) - (plotINLA$true))^2 ) )
mse_inla <- mean( ((plotINLA$f) - (plotINLA$true))^2 )
covr_inla <- mean((plotINLA$true) <= (plotINLA$up) & (plotINLA$true) >= (plotINLA$lo))
## mgcv:
mgcvmod_bs <- mgcv::gam(
t ~ s(x,bs='bs',m=c(p-1,m),k=length(splineknots)-p),
data = dat,
family = cox.ph()
)
mgcv_bs_pred <- predict(mgcvmod_bs,newdata = data.frame(x = plotx),se.fit = TRUE)
mgcv_bs_pred$fit <- mgcv_bs_pred$fit - mean(mgcv_bs_pred$fit)
rmse_mgcv <- sqrt( mean( (((mgcv_bs_pred$fit) - ((truefunc(plotx)-mean(truefunc(plotx)))))^2)) )
mse_mgcv <- mean( (((mgcv_bs_pred$fit) - ((truefunc(plotx)-mean(truefunc(plotx)))))^2))
covr_mgcv <- mean((((truefunc(plotx)-mean(truefunc(plotx)))) <= (mgcv_bs_pred$fit + 2*mgcv_bs_pred$se.fit) & ((truefunc(plotx)-mean(truefunc(plotx)))) >= (mgcv_bs_pred$fit - 2*mgcv_bs_pred$se.fit)))
resultnew <- data.frame(
method = c('AGHQ','MGCV','INLA'),
rmse = c(rmse_aghq,rmse_mgcv,rmse_inla),
coverage = c(covr_aghq,covr_mgcv,covr_inla),
mse = c(mse_aghq, mse_mgcv, mse_inla)
)
result <- rbind(result,resultnew)
}
result
}
repeating_smoothing_M_times_paral <- function(M = 100, truth = "complicated", N = 1000 , baseline, ncores = 4){
result <- tibble()
cl <- parallel::makeForkCluster(ncores)
doParallel::registerDoParallel(cl)
result <- foreach(i=1:M, .combine = rbind, .packages = c('foreach', 'stats', 'INLA', 'aghq')) %dopar% repeating_smoothing_M_times(M = 1, truth = truth, N = N, baseline = baseline)
parallel::stopCluster(cl)
result
}
### Aggregation through parallel:
set.seed(300)
result <- repeating_smoothing_M_times_paral(M = 16, truth = "complicated", N = 1000, baseline = baseline, ncores = 4)
agg_result <- result %>% group_by(method) %>% summarise(rmse = mean(rmse), coverage = mean(coverage), mse = mean(mse))
agg_result
### Aggregation through parallel:
set.seed(1234)
result <- repeating_smoothing_M_times_paral(M = 300, truth = "complicated", N = 1000, baseline = baseline, ncores = 4)
agg_result <- result %>% group_by(method) %>% summarise(rmse = mean(rmse), coverage = mean(coverage), mse = mean(mse))
agg_result
save(result, file = "result_300_aggregations.rda")
